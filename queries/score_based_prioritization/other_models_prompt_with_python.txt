Give me a sorted list of open (status = 'open') support tickets according to how I should prioritize them. 

First use the query_support_tickets tool to get all the open tickets, including title, description, creation time, email of the user who created the ticket

The project ID should be somewhere in the ticket description.

Then for each ticket, use the query_control_plane_data tool to get the following:
- the plan the project is most recently on
- the total amount of revenue generated by the project
- get the total amount of revenue generated by all projects of the user (irrespective of whether those projects had support tickets or not)

Then classify each ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Finally, sort the tickets in order of priority using the following scoring. Use the execute_python_program to implement this scoring. Embed the data you need to feed to the program directly into the code.

1. Category Weight (0-25 points):
- Downtime: 25 points
- Reliability: 20 points
- Performance: 15 points
- Bug: 10 points
- Feature Request: 5 points
- Others: 0 points

2. Plan Weight (0-15 points):
- Advanced: 15 points
- Base: 10 points
- Free: 0 points

3. Revenue Impact (0-40 points total):
- Project Revenue: Up to 20 points (scaled relative to highest project revenue)
- User Total Revenue: Up to 20 points (scaled relative to highest user revenue)

4. Age (0-20 points):
Linear scale where:
- Newest ticket = 20 points
- Oldest ticket = 0 points
- Other tickets scaled linearly between these points

Respond with the sorted list of tickets in the following JSON format:

```prioritized_tickets
[
    {
      "ticket_id": 1,
      "project_id": "0a039064-9090-40c0-8010-00a000694b06",
      "requester_email": "foo.bar@baz.com",
      "plan": "base|advanced|free",
      "project_revenue": 1234,
      "user_total_revenue": 4567,
      "time_elapsed_days": 123,
      "category": "bug",
      "priority_score": 84.1
    },
    ...
]
```