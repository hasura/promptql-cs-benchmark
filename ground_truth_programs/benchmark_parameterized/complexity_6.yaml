user_message: |
<<<<<<< HEAD
  Give me a sorted list of top {k} open (status = 'open') support tickets amongst the last {n} open tickets based on the following prioritization scoring rules.
  
  For each ticket do the following:
  - get the description of the ticket
  - intelligently (without heuristics) extract the project ID from the ticket description. project IDs are UUIDs
  - get the plan the project is most recently on
  - get the total amount of revenue generated by the project
  - get the email of the user creating the ticket
  - get the total amount of revenue generated by all projects of the user (irrespective of whether those projects had support tickets or not)
  - get the created at time of the ticket
  - intelligently (without heuristics) classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

  Classification instructions:

  1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

  2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

  3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

  4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

  5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

  6. Others: Any other type of ticket which does not fit the above categories

  - Then sort the tickets in order of priority using the following scoring:

  1. Category Weight (0-25 points):
  - Downtime: 25 points
  - Reliability: 20 points
  - Performance: 15 points
  - Bug: 10 points
  - Feature Request: 5 points
  - Others: 0 points

  2. Plan Weight (0-15 points):
  - Advanced: 15 points
  - Base: 10 points
  - Free: 0 points

  3. Revenue Impact (0-40 points total):
  - Project Revenue: Up to 20 points (scaled relative to highest project revenue)
  - User Total Revenue: Up to 20 points (scaled relative to highest user revenue)

  4. Age (0-20 points):
  Linear scale where:
  - Newest ticket = 20 points
  - Oldest ticket = 0 points
  - Other tickets scaled linearly between these points

  Also, print the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
=======
  Give me a sorted list of top {k} support tickets which I should prioritize amongst the last {n} open tickets (i.e., status = 'open').
  
  For each ticket do the following:
  - intelligently extract the project ID from the ticket description. project IDs are UUIDs
  - get the plan the project is most recently on
  - get the time the ticket was created at
  - classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.
  - get the net revenue for the project since 16-01-2024

  Classification instructions:
  
  1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.
  
  2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 
  
  3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 
  
  4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  
  
  5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 
  
  6. Others: Any other type of ticket which does not fit the above categories
  
  Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
  - If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
  - If a ticket is on the base or free plan with category 'downtime', it should be prioritized higher.
  - Compare net revenue for the ticket's respective projects to prioritize the higher revenue project.
  - Compare ticket creation times to prioritize the older ticket.

  Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
>>>>>>> origin/main
  Example:
  <tickets>
  123
  987
  </tickets>