[
  {
    "timestamp": "2025-01-29T14:11:28.615076",
    "response": {
      "id": "chatcmpl-AuxuoxYTHiRzBye3FAD1oh76OhXoh",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is an illustrative example showing how one might arrive at a prioritized top 5 list among the last 20 open tickets, following your requested classification and sorting rules. Because we do not have your actual data, the example uses hypothetical tickets to demonstrate how the solution works end-to-end.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Retrieve the 20 most recent open tickets:\n\n  SELECT\n    id,\n    description,\n    created_at\n  FROM support_ticket\n  WHERE status = 'open'\n  ORDER BY created_at DESC\n  LIMIT 20;\n\n2) For each returned ticket:\n   a) Extract the project ID (a UUID) from the description using a regex pattern like:\n      ([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\n   b) Look up the most recent plan for that project in the control plane:\n\n      SELECT p.name\n      FROM project_plan_changelogs pgc\n      JOIN plans p ON p.id = pgc.plan_id\n      WHERE pgc.project_id = '[extracted_project_id]'\n      ORDER BY pgc.created_at DESC\n      LIMIT 1;\n\n   c) Based on the ticket description, classify the ticket into one of:\n      \u2022 downtime\n      \u2022 reliability\n      \u2022 performance\n      \u2022 bug\n      \u2022 feature request\n      \u2022 others\n\n3) Sort the tickets pairwise according to your rules:\n   1. If a ticket is on the advanced plan with category = downtime or reliability, it is higher priority.\n   2. If a ticket is on the base plan with category = downtime or reliability, it is next.\n   3. Otherwise, rank by category as: downtime > reliability > performance > bug > feature request > others.\n   4. If still tied, older ticket (earlier created_at) comes first.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nEXAMPLE\n\nImagine our final data for six tickets (IDs 101, 202, 303, 404, 505, 606) extracted and classified as follows (all are status=open):\n\n\u2022 Ticket 303\n  - Project ID: 11111111-2222-3333-4444-555555555555\n  - Plan: advanced\n  - Created at: 2023-09-02\n  - Description mentions \u201cmajor outage,\u201d \u201c500 errors,\u201d so \u2192 classified as downtime\n\n\u2022 Ticket 101\n  - Project ID: 11111111-2222-3333-4444-555555555555\n  - Plan: advanced\n  - Created at: 2023-09-01\n  - Description mentions \u201crandom 503,\u201d \u201cintermittent failures,\u201d so \u2192 reliability\n\n\u2022 Ticket 606\n  - Project ID: 99999999-aaaa-bbbb-cccc-ddddeeeeffff\n  - Plan: base\n  - Created at: 2023-09-01\n  - Description indicates \u201crandom 503 in production\u201d \u2192 reliability\n\n\u2022 Ticket 202\n  - Project ID: 66666666-7777-8888-9999-000000000000\n  - Plan: base\n  - Created at: 2023-09-03\n  - Description says \u201cextremely high latency\u201d \u2192 performance\n\n\u2022 Ticket 404\n  - Project ID: aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n  - Plan: base\n  - Created at: 2023-09-05\n  - Description indicates \u201cencountered a bug\u201d \u2192 bug\n\n\u2022 Ticket 505\n  - Project ID: 66666666-7777-8888-9999-000000000000\n  - Plan: base\n  - Created at: 2023-09-04\n  - Description requests \u201cnew feature for batch operations\u201d \u2192 feature request\n\nAfter applying the prioritization rules:\n\n1) Ticket 303 \u2192 (advanced + downtime)  \n2) Ticket 101 \u2192 (advanced + reliability)  \n3) Ticket 606 \u2192 (base + reliability)  \n4) Ticket 202 \u2192 (base + performance)  \n5) Ticket 404 \u2192 (base + bug)  \n6) Ticket 505 \u2192 (base + feature request)\n\nWe only need the top 5. Sorted (highest priority first):\n\n<tickets>\n303\n101\n606\n202\n404\n</tickets>\n\nIn an actual environment, you would run the above queries, parse and classify each ticket\u2019s description, determine its plan, then sort accordingly. The result would be your final prioritized list of ticket IDs.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738140046,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 5468,
        "prompt_tokens": 1037,
        "total_tokens": 6505,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 4480,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]