[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 20 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an illustrative example showing how one might arrive at a prioritized top 5 list among the last 20 open tickets, following your requested classification and sorting rules. Because we do not have your actual data, the example uses hypothetical tickets to demonstrate how the solution works end-to-end.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Retrieve the 20 most recent open tickets:\n\n  SELECT\n    id,\n    description,\n    created_at\n  FROM support_ticket\n  WHERE status = 'open'\n  ORDER BY created_at DESC\n  LIMIT 20;\n\n2) For each returned ticket:\n   a) Extract the project ID (a UUID) from the description using a regex pattern like:\n      ([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\n   b) Look up the most recent plan for that project in the control plane:\n\n      SELECT p.name\n      FROM project_plan_changelogs pgc\n      JOIN plans p ON p.id = pgc.plan_id\n      WHERE pgc.project_id = '[extracted_project_id]'\n      ORDER BY pgc.created_at DESC\n      LIMIT 1;\n\n   c) Based on the ticket description, classify the ticket into one of:\n      \u2022 downtime\n      \u2022 reliability\n      \u2022 performance\n      \u2022 bug\n      \u2022 feature request\n      \u2022 others\n\n3) Sort the tickets pairwise according to your rules:\n   1. If a ticket is on the advanced plan with category = downtime or reliability, it is higher priority.\n   2. If a ticket is on the base plan with category = downtime or reliability, it is next.\n   3. Otherwise, rank by category as: downtime > reliability > performance > bug > feature request > others.\n   4. If still tied, older ticket (earlier created_at) comes first.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nEXAMPLE\n\nImagine our final data for six tickets (IDs 101, 202, 303, 404, 505, 606) extracted and classified as follows (all are status=open):\n\n\u2022 Ticket 303\n  - Project ID: 11111111-2222-3333-4444-555555555555\n  - Plan: advanced\n  - Created at: 2023-09-02\n  - Description mentions \u201cmajor outage,\u201d \u201c500 errors,\u201d so \u2192 classified as downtime\n\n\u2022 Ticket 101\n  - Project ID: 11111111-2222-3333-4444-555555555555\n  - Plan: advanced\n  - Created at: 2023-09-01\n  - Description mentions \u201crandom 503,\u201d \u201cintermittent failures,\u201d so \u2192 reliability\n\n\u2022 Ticket 606\n  - Project ID: 99999999-aaaa-bbbb-cccc-ddddeeeeffff\n  - Plan: base\n  - Created at: 2023-09-01\n  - Description indicates \u201crandom 503 in production\u201d \u2192 reliability\n\n\u2022 Ticket 202\n  - Project ID: 66666666-7777-8888-9999-000000000000\n  - Plan: base\n  - Created at: 2023-09-03\n  - Description says \u201cextremely high latency\u201d \u2192 performance\n\n\u2022 Ticket 404\n  - Project ID: aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n  - Plan: base\n  - Created at: 2023-09-05\n  - Description indicates \u201cencountered a bug\u201d \u2192 bug\n\n\u2022 Ticket 505\n  - Project ID: 66666666-7777-8888-9999-000000000000\n  - Plan: base\n  - Created at: 2023-09-04\n  - Description requests \u201cnew feature for batch operations\u201d \u2192 feature request\n\nAfter applying the prioritization rules:\n\n1) Ticket 303 \u2192 (advanced + downtime)  \n2) Ticket 101 \u2192 (advanced + reliability)  \n3) Ticket 606 \u2192 (base + reliability)  \n4) Ticket 202 \u2192 (base + performance)  \n5) Ticket 404 \u2192 (base + bug)  \n6) Ticket 505 \u2192 (base + feature request)\n\nWe only need the top 5. Sorted (highest priority first):\n\n<tickets>\n303\n101\n606\n202\n404\n</tickets>\n\nIn an actual environment, you would run the above queries, parse and classify each ticket\u2019s description, determine its plan, then sort accordingly. The result would be your final prioritized list of ticket IDs."
  }
]