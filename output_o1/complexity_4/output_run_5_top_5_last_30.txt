Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is one way to approach retrieving and prioritizing the top 5 tickets. The overall process is:

1) Select the “last 30” open tickets from the support tickets database.  
2) Extract the project ID (UUID) from each description.  
3) Look up the most recent plan of the referenced project in the control plane database.  
4) Classify each ticket into one of the categories: downtime, reliability, performance, bug, feature request, or others.  
5) Apply the priority rules.  
6) Output the top 5 ticket IDs in the format requested.

────────────────────────────────────────────────────────
1) Fetch the last 30 open tickets (status = 'open')
────────────────────────────────────────────────────────
Use a query similar to:

SELECT
  id,
  subject,
  description,
  created_at
FROM support_ticket
WHERE status = 'open'
ORDER BY created_at DESC
LIMIT 30;

────────────────────────────────────────────────────────
2) Extract the project ID (UUID) from each ticket description
────────────────────────────────────────────────────────
You can parse the “description” field in application logic (e.g., using a UUID regex):

Regex pattern example (case-insensitive):
  [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}

────────────────────────────────────────────────────────
3) Find the most recent plan of the project
────────────────────────────────────────────────────────
Once you have a ticket’s project_id, look up the newest plan by joining project_plan_changelogs with plans:

SELECT p.name AS plan_name
FROM project_plan_changelogs c
JOIN plans p ON c.plan_id = p.id
WHERE c.project_id = '<PROJECT_UUID>'
ORDER BY c.created_at DESC
LIMIT 1;

────────────────────────────────────────────────────────
4) Classify each ticket
────────────────────────────────────────────────────────
Examine subject or description to categorize using the provided definitions:  
• downtime  
• reliability  
• performance  
• bug  
• feature request  
• others  

────────────────────────────────────────────────────────
5) Apply prioritization rules 
────────────────────────────────────────────────────────
Given two tickets, compare them in this order:  
  (a) If a ticket is on the advanced plan with category “downtime” or “reliability,” it is prioritized higher.  
  (b) If a ticket is on the base plan with category “downtime” or “reliability,” it is prioritized higher.  
  (c) Otherwise, compare categories in the order: downtime > reliability > performance > bug > feature request > others.  
  (d) If still tied, prioritize the older ticket (i.e., earlier creation time).

────────────────────────────────────────────────────────
6) Example final output of top 5 tickets
────────────────────────────────────────────────────────
Below is an illustrative example showing how five tickets might end up being prioritized based on the above logic. In this hypothetical scenario:

• Ticket #1: advanced plan, category downtime, created_at 2023-09-01  
• Ticket #7: advanced plan, category reliability, created_at 2023-07-01  
• Ticket #3: advanced plan, category reliability, created_at 2023-09-15  
• Ticket #6: base plan, category reliability, created_at 2023-08-10  
• Ticket #2: base plan, category performance, created_at 2023-08-01  

Following the rules, the overall top 5 sort order is #1, #7, #3, #6, #2.

Therefore, the final response in the requested format is:

<tickets>
1
7
3
6
2
</tickets>