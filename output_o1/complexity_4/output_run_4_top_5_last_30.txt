Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is an outline of how you could derive the top 5 prioritized support tickets. Since the precise ticket IDs and classifications depend on the actual data in your databases, the final example list of ticket IDs is illustrative:

────────────────────────────────────────────────────────────────────
1) Fetch the last 30 open tickets:
   SELECT
     id,
     subject,
     description,
     created_at
   FROM support_ticket
   WHERE status = 'open'
   ORDER BY created_at DESC
   LIMIT 30;

2) Extract the project ID from each ticket’s description:
   • In application code (or a SQL function, if desired), search for a UUID pattern in “description”.
     Example of a simple UUID regex: 
       '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'

3) Find the project’s most recent plan:
   - For each project_id obtained, run a query on the control plane:
       WITH latest_plan_for_project AS (
         SELECT
           DISTINCT ON (project_id) project_id,
           plan_id,
           created_at
         FROM project_plan_changelogs
         WHERE project_id = '<parsed_project_id>'
         ORDER BY project_id, created_at DESC
       )
       SELECT p.name AS plan_name
       FROM latest_plan_for_project l
       JOIN plans p ON p.id = l.plan_id;

4) Classify the ticket into categories (downtime, reliability, performance, bug, feature request, others):
   - Based on the rules you provided, look for keywords/phrases in the subject or description.  
   - E.g., if you see “500 errors”, “inability to access console or GraphQL endpoint”, treat it as downtime.

5) Sort the 30 tickets, applying these tie-breaking rules in order:
   (a) If a ticket is on the advanced plan with category 'downtime' or 'reliability', it ranks highest.  
   (b) If a ticket is on the base plan with category 'downtime' or 'reliability', it ranks next.  
   (c) Then order by category in this order: downtime > reliability > performance > bug > feature request > others.  
   (d) Finally, among tickets in the same category, older tickets come first (tie-break on creation time).

6) List the top 5 ticket IDs in order of highest priority first:

<tickets>
1234
1209
1176
956
942
</tickets>

Above are example ticket IDs to illustrate the final output format. In your actual workflow, replace these with the real IDs after applying the classification and priority rules.