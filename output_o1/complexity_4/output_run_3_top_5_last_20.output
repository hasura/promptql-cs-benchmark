[
  {
    "timestamp": "2025-01-29T14:20:05.231067",
    "response": {
      "id": "chatcmpl-Auy33Xx1kBjJluWMtaIujvMn1VyaE",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is an illustrative example of how you might produce and return the top 5 open support tickets (by ticket ID) according to the specified priority rules. Because we do not have actual data, the ticket IDs are simply sample placeholders to demonstrate the sorting logic. In a real scenario, you would run actual queries against both databases, parse out the project IDs, fetch the most recent plan for each project, classify the ticket, and then apply the priority rules to return the top 5.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Retrieve the last 20 open tickets from the Support Tickets Database:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nUse a read-only query to get up to 20 tickets that have \"status = 'open'\", ordered by creation date (descending).\n\nExample query:\n\nSELECT\n  id,\n  subject,\n  description,\n  created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 20;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2) Extract the Project ID (UUID) from each ticket description.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nIn PostgreSQL, you can attempt something like:\n\nSELECT\n  id,\n  subject,\n  description,\n  created_at,\n  substring(description FROM '([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})') AS project_id\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 20;\n\nIf the ticket description includes a valid UUID (e.g. \"Project ID: 7e96beac-47e2-469f-8940-bfb0aac5c3b9\"), the above substring(...) call will capture it as \u201cproject_id.\u201d\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3) For each extracted project_id, get the most recent plan from the Control Plane Database.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nFor each project_id found above, run a query against the control plane to find the most recent plan:\n\nSELECT\n  p.name AS plan_name\nFROM project_plan_changelogs ppc\nJOIN plans p ON p.id = ppc.plan_id\nWHERE ppc.project_id = '<the_project_uuid>'\nORDER BY ppc.created_at DESC\nLIMIT 1;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4) Classify the ticket into one of the categories.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nLook for key terms in the ticket\u2019s subject or description to classify as one of:\n\u2022 downtime\n\u2022 reliability\n\u2022 performance\n\u2022 bug\n\u2022 feature request\n\u2022 others\n\nExample pseudocode for classification:\n\nCASE\n  WHEN description ILIKE '%inability to access%' \n    OR description ILIKE '%500 error%' \n    OR description ILIKE '%timeout%' \n    OR description ILIKE '%widespread service disruptions%'\n    THEN 'downtime'\n  WHEN description ILIKE '%random request failures%' \n    OR description ILIKE '%intermittent%' \n    OR description ILIKE '%service instability%'\n    THEN 'reliability'\n  WHEN description ILIKE '%performance%' \n    OR description ILIKE '%latency%' \n    OR description ILIKE '%taking several seconds%'\n    THEN 'performance'\n  WHEN description ILIKE '%bug%'\n    OR description ILIKE '%unauthorized access%' \n    OR description ILIKE '%wrong results%'\n    THEN 'bug'\n  WHEN description ILIKE '%feature request%' \n    OR description ILIKE '%enhancement%' \n    OR description ILIKE '%improvement%'\n    THEN 'feature request'\n  ELSE 'others'\nEND\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5) Apply the priority rules and pick the top 5.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nPriority rules (in order, break ties by moving to the next rule):\n1. A ticket on the advanced plan with category ('downtime' or 'reliability') is higher priority.\n2. A ticket on the base plan with category ('downtime' or 'reliability') is next.\n3. Among all other tickets, sort categories as: downtime > reliability > performance > bug > feature request > others.\n4. If there is still a tie, prioritize the older ticket (earlier created_at).\n\nIn practice, you can implement this in your application logic or craft a complex ORDER BY in SQL. Pseudocode for sorting:\n\nORDER BY\n  -- (1) advanced + (downtime or reliability)\n  CASE WHEN plan_name ILIKE '%advanced%' \n        AND (category IN ('downtime','reliability')) THEN 1 ELSE 0 END DESC,\n  -- (2) base + (downtime or reliability)\n  CASE WHEN plan_name ILIKE '%base%' \n        AND (category IN ('downtime','reliability')) THEN 1 ELSE 0 END DESC,\n  -- (3) category priority\n  CASE category\n    WHEN 'downtime' THEN 1\n    WHEN 'reliability' THEN 2\n    WHEN 'performance' THEN 3\n    WHEN 'bug' THEN 4\n    WHEN 'feature request' THEN 5\n    ELSE 6\n  END ASC,\n  -- (4) older tickets first\n  created_at ASC\n\nFinally, retrieve the top 5 ticket IDs after applying the sort criteria.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nExample: Final Top 5 Tickets in Priority Order\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nFor demonstration only, assume we have these 8 open tickets (IDs 101\u2013108), with extracted plan_name and assigned category:\n\n\u2022 Ticket 101: \n  \u2013 plan_name = 'Advanced'\n  \u2013 category = 'downtime'\n  \u2013 created_at = older\n\u2022 Ticket 102: \n  \u2013 plan_name = 'Advanced'\n  \u2013 category = 'reliability'\n  \u2013 created_at = newer\n\u2022 Ticket 103: \n  \u2013 plan_name = 'Advanced'\n  \u2013 category = 'performance'\n\u2022 Ticket 104: \n  \u2013 plan_name = 'Base'\n  \u2013 category = 'reliability'\n\u2022 Ticket 105: \n  \u2013 plan_name = 'Base'\n  \u2013 category = 'downtime'\n\u2022 Ticket 106: \n  \u2013 plan_name = 'Advanced'\n  \u2013 category = 'bug'\n\u2022 Ticket 107: \n  \u2013 plan_name = 'Advanced'\n  \u2013 category = 'feature request'\n\u2022 Ticket 108: \n  \u2013 plan_name = 'Base'\n  \u2013 category = 'others'\n\nApplying the rules:\n1) Advanced & (downtime or reliability): #101 (downtime, older) > #102 (reliability, newer)\n2) Base & (downtime or reliability): #105 (downtime) > #104 (reliability)\n3) Then apply category order among the rest:\n   #103 (performance) > #106 (bug) > #107 (feature request) > #108 (others)\n4) Within each category, older ticket first (if there\u2019s a tie).\n\nHence the top 5 (in order) become:\n101, 102, 105, 104, 103\n\nPutting them in the requested output format:\n\n<tickets>\n101\n102\n105\n104\n103\n</tickets>\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nRemember, in a real scenario you will:\n\u2022 Execute the queries against your databases. \n\u2022 Parse out the project IDs from descriptions. \n\u2022 Fetch the corresponding plan. \n\u2022 Classify tickets. \n\u2022 Sort according to the rules. \n\u2022 Finally, return the top 5 ticket IDs as shown above.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738140557,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 5692,
        "prompt_tokens": 1037,
        "total_tokens": 6729,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 4096,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]