Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is an illustrative example of how you might produce the top 5 open tickets to prioritize, following the requested steps. The example assumes you have at least 6 open tickets in your system. In a real scenario, you would run these queries and perform the logic on the actual data to get the final result.

─────────────────────────────────────────────────
1) Retrieve the last 30 open tickets
─────────────────────────────────────────────────
Use the Support Tickets database:

SELECT id, subject, description, created_at
FROM support_ticket
WHERE status = 'open'
ORDER BY created_at DESC
LIMIT 30;

─────────────────────────────────────────────────
2) Parse the description to find the project ID
─────────────────────────────────────────────────
Project IDs are UUIDs. You might use a regular expression in application code, for example:
/\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\b/

─────────────────────────────────────────────────
3) For each project ID, retrieve the most recent plan
─────────────────────────────────────────────────
From the Control Plane database, for each extracted project_id:

SELECT p.name AS plan_name
FROM project_plan_changelogs ppc
JOIN plans p ON ppc.plan_id = p.id
WHERE ppc.project_id = '<PROJECT_ID_FROM_TICKET>'
ORDER BY ppc.created_at DESC
LIMIT 1;

This gives you the project’s most recent plan name (e.g. 'advanced', 'base', etc.).

─────────────────────────────────────────────────
4) Classify each ticket into a category (downtime, reliability, performance, bug, feature request, others)
─────────────────────────────────────────────────
Use the textual description of the ticket and match it to the classification rules:

• downtime → “widespread service disruptions,” “inability to access console,” “production environment outages”  
• reliability → “random request failures,” “service instability,” “intermittent connectivity”  
• performance → “significantly increased response times,” “latency,” “slow queries”  
• bug → “software bug,” “GraphQL returns wrong results,” “unauthorized access when using X”  
• feature request → “requesting new functionality,” “would like to have an option for X”  
• others → anything else not matching the above  

─────────────────────────────────────────────────
5) Sort the tickets by priority
─────────────────────────────────────────────────
To compare any two tickets, apply these rules in order (move to the next rule only if the previous rule ties):  
1. A ticket on the advanced plan with category 'downtime' or 'reliability' is prioritized higher.  
2. A ticket on the base plan with category 'downtime' or 'reliability' is prioritized higher.  
3. Next, compare categories in this order: downtime > reliability > performance > bug > feature request > others  
4. If still tied, compare creation time (older tickets first).  

─────────────────────────────────────────────────
Example of Prioritization
─────────────────────────────────────────────────
Suppose the following six tickets are among the last 30 open tickets:

• Ticket #101 
  – Plan: advanced  
  – Created at: 2023-10-01  
  – Description: “Our production environment is down, we see 500 errors everywhere for project ID aaaa1111-bbbb-2222-cccc-3333dddd4444.”  
  – Category → downtime  

• Ticket #102  
  – Plan: base  
  – Created at: 2023-09-28  
  – Description: “Intermittent request failures are happening for project ID aaaa1111-bbbb-2222-cccc-5555dddd6666.”  
  – Category → reliability  

• Ticket #103  
  – Plan: advanced  
  – Created at: 2023-09-29  
  – Description: “We found a bug in event triggers for project ID aaaa1111-bbbb-2222-cccc-7777dddd8888.”  
  – Category → bug  

• Ticket #104  
  – Plan: advanced  
  – Created at: 2023-09-28  
  – Description: “We have performance issues with repeated queries for project ID aaaa1111-bbbb-2222-cccc-9999dddd0000.”  
  – Category → performance  

• Ticket #105  
  – Plan: base  
  – Created at: 2023-09-27  
  – Description: “Feature request: support batch operations on Actions for project ID aaaa1111-bbbb-2222-cccc-1111dddd2222.”  
  – Category → feature request  

• Ticket #106  
  – Plan: base  
  – Created at: 2023-09-26  
  – Description: “We’re seeing random 500 errors in production for project ID aaaa1111-bbbb-2222-cccc-9999dddd9999.”  
  – Category → reliability (since the description highlights intermittent 500 errors)  

Now we apply the sorting rules:

1) All advanced plan tickets w/ downtime or reliability come first.  
   – Ticket #101 is advanced + downtime → goes to the top.

2) Next, all base plan tickets w/ downtime or reliability.  
   – Ticket #102 (base + reliability)  
   – Ticket #106 (base + reliability)  
   Compare creation time to resolve tie. #106 (2023-09-26) is older than #102 (2023-09-28), thus #106 is higher priority than #102.

3) Among remaining tickets, sort by category order: downtime > reliability > performance > bug > feature request > others.  
   – We have #104 (performance), #103 (bug), #105 (feature request). So, after the above downtime/reliability tickets, we put #104, then #103, then #105.

Hence, the final sorted order is:
1) #101 (advanced, downtime)  
2) #106 (base, reliability)  
3) #102 (base, reliability)  
4) #104 (advanced, performance)  
5) #103 (advanced, bug)  
6) #105 (base, feature request)  ← this would be 6th if we needed more than 5  

Accordingly, the top 5 tickets to prioritize would be:

<tickets>
101
106
102
104
103
</tickets>

In your real workflow, after running those queries and applying the classification/sorting logic, you would output the IDs of the top 5 tickets in exactly this format.