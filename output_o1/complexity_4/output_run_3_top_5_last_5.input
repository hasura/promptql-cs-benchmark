[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "",
    "tool_calls": [
      "ChatCompletionMessageToolCall(id='call_xJLrNJlT6TsOLa4xZecLc6gp', function=Function(arguments='{\"sql\":\"WITH last_5_open_tickets AS (\\\\n  SELECT id, description, created_at\\\\n  FROM support_ticket\\\\n  WHERE status = \\'open\\'\\\\n  ORDER BY created_at DESC\\\\n  LIMIT 5\\\\n),\\\\nextracted_project_id AS (\\\\n  SELECT\\\\n    l5.id,\\\\n    l5.description,\\\\n    l5.created_at,\\\\n    -- Attempt to extract project_id (UUID) using regex\\\\n    (REGEXP_MATCHES(l5.description, \\'([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\\'))[1] AS project_id\\\\n  FROM last_5_open_tickets l5\\\\n),\\\\nlatest_plan AS (\\\\n  SELECT\\\\n    ep.id,\\\\n    (\\\\n      SELECT p.name\\\\n      FROM project_plan_changelogs ppc\\\\n      JOIN plans p ON ppc.plan_id = p.id\\\\n      WHERE ppc.project_id::text = ep.project_id\\\\n      ORDER BY ppc.created_at DESC\\\\n      LIMIT 1\\\\n    ) AS plan_name\\\\n  FROM extracted_project_id ep\\\\n),\\\\nclassified AS (\\\\n  SELECT\\\\n    ep.id,\\\\n    ep.created_at,\\\\n    COALESCE(lp.plan_name, \\'unknown\\') AS plan_name,\\\\n    CASE\\\\n      WHEN ep.description ~* \\'(widespread service disruptions|unable to access project consoles|production environment outages|500 error|timeouts)\\' THEN \\'downtime\\'\\\\n      WHEN ep.description ~* \\'(intermittent connectivity|random request failures|service instability)\\' THEN \\'reliability\\'\\\\n      WHEN ep.description ~* \\'(performance|increased response times|latency)\\' THEN \\'performance\\'\\\\n      WHEN ep.description ~* \\'bug\\' THEN \\'bug\\'\\\\n      WHEN ep.description ~* \\'(feature request|requesting .* functionality)\\' THEN \\'feature request\\'\\\\n      ELSE \\'others\\'\\\\n    END AS category\\\\n  FROM extracted_project_id ep\\\\n  LEFT JOIN latest_plan lp ON ep.id = lp.id\\\\n)\\\\nSELECT c.id\\\\nFROM classified c\\\\nORDER BY\\\\n  -- (1) advanced plan w/ downtime or reliability: highest priority\\\\n  CASE WHEN plan_name = \\'advanced\\' AND category IN (\\'downtime\\',\\'reliability\\') THEN 1 ELSE 0 END DESC,\\\\n  -- (2) base plan w/ downtime or reliability: next highest priority\\\\n  CASE WHEN plan_name = \\'base\\' AND category IN (\\'downtime\\',\\'reliability\\') THEN 1 ELSE 0 END DESC,\\\\n  -- (3) category priority: downtime > reliability > performance > bug > feature request > others\\\\n  CASE category\\\\n    WHEN \\'downtime\\' THEN 5\\\\n    WHEN \\'reliability\\' THEN 4\\\\n    WHEN \\'performance\\' THEN 3\\\\n    WHEN \\'bug\\' THEN 2\\\\n    WHEN \\'feature request\\' THEN 1\\\\n    ELSE 0\\\\n  END DESC,\\\\n  -- (4) older ticket first\\\\n  c.created_at ASC\\\\n;\"}', name='query_support_tickets'), type='function')"
    ]
  },
  {
    "role": "tool",
    "tool_call_id": "call_xJLrNJlT6TsOLa4xZecLc6gp",
    "name": "query_support_tickets",
    "content": "{\n  \"error\": \"Error executing query_support_tickets: relation \\\"project_plan_changelogs\\\" does not exist\\nLINE 22:       FROM project_plan_changelogs ppc\\n                    ^\\n\"\n}"
  },
  {
    "role": "assistant",
    "content": "",
    "tool_calls": [
      "ChatCompletionMessageToolCall(id='call_oArY0jXovd8Mk9zYU69KTfTy', function=Function(arguments='{\"sql\":\"SELECT id, description, created_at \\\\nFROM support_ticket\\\\nWHERE status = \\'open\\'\\\\nORDER BY created_at DESC\\\\nLIMIT 5;\"}', name='query_support_tickets'), type='function')"
    ]
  },
  {
    "role": "tool",
    "tool_call_id": "call_oArY0jXovd8Mk9zYU69KTfTy",
    "name": "query_support_tickets",
    "content": "[\n  {\n    \"id\": 143,\n    \"description\": \"I am unable to access my project on Hasura Cloud. When I try to open the project dashboard, it fails to load and shows an error message. This is critically impacting our production environment and needs immediate attention.\\n\\nProject ID: abc123\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.41.0\\n\\nPlease assist as soon as possible.\\n\\nThank you.\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\",\n    \"created_at\": \"2025-01-03T20:32:35.345840+00:00\"\n  },\n  {\n    \"id\": 166,\n    \"description\": \"Hello,\\n\\nWe are using your platform with a PostgreSQL database and would like to request support for custom GraphQL directives in queries and mutations. This feature would greatly help us implement advanced query logic and improve our application's flexibility.\\n\\nIs this something that could be supported in future releases?\\n\\nThank you for your assistance.\\n\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\",\n    \"created_at\": \"2024-12-21T14:32:35.345840+00:00\"\n  },\n  {\n    \"id\": 209,\n    \"description\": \"Hello,\\n\\nWe are experiencing a complete outage of our production environment. All our services are down, and users are unable to access the application, leading to a major disruption in our operations.\\n\\nOur application uses PostgreSQL as the database, and we are currently running version v2.48.5. We have not made any recent changes or deployments that could have caused this issue.\\n\\nWe urgently need assistance to resolve this problem.\\n\\nThank you,\\n[Your Name]\\n\\nProject ID: 76de9616-3d7b-49d7-b909-e154dda91489\\n\",\n    \"created_at\": \"2024-12-05T07:00:00+00:00\"\n  },\n  {\n    \"id\": 169,\n    \"description\": \"Hi,\\n\\nWe are experiencing resource exhaustion issues while using the Schema Registry feature in our production environment. The Schema Registry seems to consume a lot of CPU and memory resources, leading to slow responses from our application.\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.46.0\\n\\nCould you please help us resolve this issue?\\n\\nThanks.\\n\\nProject ID: 386d8856-9020-47eb-a21a-2ebe6b81428e\\n\",\n    \"created_at\": \"2024-11-12T05:00:00+00:00\"\n  },\n  {\n    \"id\": 251,\n    \"description\": \"Hi Support,\\n\\nWe are experiencing significant performance degradation when performing operations that involve permissions in our Hasura setup. Queries that used to execute in milliseconds are now taking several seconds to complete, especially those with complex permission rules.\\n\\nWe are using PostgreSQL as our database. Current Hasura version: v2.44.0.\\n\\nCould you please help us troubleshoot this issue and suggest any optimizations?\\n\\nThanks.\\n\\nProject ID: d5dc02fc-707a-4084-854a-79f5866d4dd3\\n\",\n    \"created_at\": \"2024-10-25T04:00:00+00:00\"\n  }\n]"
  },
  {
    "role": "assistant",
    "content": "",
    "tool_calls": [
      "ChatCompletionMessageToolCall(id='call_ukLViwpbg7ZqI9vZiF86n1bX', function=Function(arguments='{\"sql\":\"WITH latest_plan AS (\\\\n    SELECT DISTINCT ON (ppc.project_id) ppc.project_id,\\\\n        p.name AS plan_name,\\\\n        ppc.created_at AS plan_changed_at\\\\n    FROM project_plan_changelogs ppc\\\\n    JOIN plans p ON ppc.plan_id = p.id\\\\n    WHERE ppc.project_id IN (\\\\n        \\'2a8d4b07-c391-450f-8153-f6521f8a20a0\\',\\\\n        \\'76de9616-3d7b-49d7-b909-e154dda91489\\',\\\\n        \\'386d8856-9020-47eb-a21a-2ebe6b81428e\\',\\\\n        \\'d5dc02fc-707a-4084-854a-79f5866d4dd3\\'\\\\n    )\\\\n    ORDER BY ppc.project_id, ppc.created_at DESC\\\\n)\\\\nSELECT project_id, plan_name FROM latest_plan;\"}', name='query_control_plane_data'), type='function')"
    ]
  },
  {
    "role": "tool",
    "tool_call_id": "call_ukLViwpbg7ZqI9vZiF86n1bX",
    "name": "query_control_plane_data",
    "content": "[\n  {\n    \"project_id\": \"2a8d4b07-c391-450f-8153-f6521f8a20a0\",\n    \"plan_name\": \"base\"\n  },\n  {\n    \"project_id\": \"386d8856-9020-47eb-a21a-2ebe6b81428e\",\n    \"plan_name\": \"advanced\"\n  },\n  {\n    \"project_id\": \"76de9616-3d7b-49d7-b909-e154dda91489\",\n    \"plan_name\": \"free\"\n  },\n  {\n    \"project_id\": \"d5dc02fc-707a-4084-854a-79f5866d4dd3\",\n    \"plan_name\": \"base\"\n  }\n]"
  },
  {
    "role": "assistant",
    "content": "<tickets>\n143\n209\n251\n169\n166\n</tickets>"
  }
]