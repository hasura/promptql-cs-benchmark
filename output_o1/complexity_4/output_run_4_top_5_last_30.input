[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an outline of how you could derive the top 5 prioritized support tickets. Since the precise ticket IDs and classifications depend on the actual data in your databases, the final example list of ticket IDs is illustrative:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Fetch the last 30 open tickets:\n   SELECT\n     id,\n     subject,\n     description,\n     created_at\n   FROM support_ticket\n   WHERE status = 'open'\n   ORDER BY created_at DESC\n   LIMIT 30;\n\n2) Extract the project ID from each ticket\u2019s description:\n   \u2022 In application code (or a SQL function, if desired), search for a UUID pattern in \u201cdescription\u201d.\n     Example of a simple UUID regex: \n       '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'\n\n3) Find the project\u2019s most recent plan:\n   - For each project_id obtained, run a query on the control plane:\n       WITH latest_plan_for_project AS (\n         SELECT\n           DISTINCT ON (project_id) project_id,\n           plan_id,\n           created_at\n         FROM project_plan_changelogs\n         WHERE project_id = '<parsed_project_id>'\n         ORDER BY project_id, created_at DESC\n       )\n       SELECT p.name AS plan_name\n       FROM latest_plan_for_project l\n       JOIN plans p ON p.id = l.plan_id;\n\n4) Classify the ticket into categories (downtime, reliability, performance, bug, feature request, others):\n   - Based on the rules you provided, look for keywords/phrases in the subject or description.  \n   - E.g., if you see \u201c500 errors\u201d, \u201cinability to access console or GraphQL endpoint\u201d, treat it as downtime.\n\n5) Sort the 30 tickets, applying these tie-breaking rules in order:\n   (a) If a ticket is on the advanced plan with category 'downtime' or 'reliability', it ranks highest.  \n   (b) If a ticket is on the base plan with category 'downtime' or 'reliability', it ranks next.  \n   (c) Then order by category in this order: downtime > reliability > performance > bug > feature request > others.  \n   (d) Finally, among tickets in the same category, older tickets come first (tie-break on creation time).\n\n6) List the top 5 ticket IDs in order of highest priority first:\n\n<tickets>\n1234\n1209\n1176\n956\n942\n</tickets>\n\nAbove are example ticket IDs to illustrate the final output format. In your actual workflow, replace these with the real IDs after applying the classification and priority rules."
  }
]