[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an illustrative example of how you might produce the top 5 open tickets to prioritize, following the requested steps. The example assumes you have at least 6 open tickets in your system. In a real scenario, you would run these queries and perform the logic on the actual data to get the final result.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Retrieve the last 30 open tickets\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse the Support Tickets database:\n\nSELECT id, subject, description, created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 30;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2) Parse the description to find the project ID\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nProject IDs are UUIDs. You might use a regular expression in application code, for example:\n/\\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\b/\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3) For each project ID, retrieve the most recent plan\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFrom the Control Plane database, for each extracted project_id:\n\nSELECT p.name AS plan_name\nFROM project_plan_changelogs ppc\nJOIN plans p ON ppc.plan_id = p.id\nWHERE ppc.project_id = '<PROJECT_ID_FROM_TICKET>'\nORDER BY ppc.created_at DESC\nLIMIT 1;\n\nThis gives you the project\u2019s most recent plan name (e.g. 'advanced', 'base', etc.).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4) Classify each ticket into a category (downtime, reliability, performance, bug, feature request, others)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse the textual description of the ticket and match it to the classification rules:\n\n\u2022 downtime \u2192 \u201cwidespread service disruptions,\u201d \u201cinability to access console,\u201d \u201cproduction environment outages\u201d  \n\u2022 reliability \u2192 \u201crandom request failures,\u201d \u201cservice instability,\u201d \u201cintermittent connectivity\u201d  \n\u2022 performance \u2192 \u201csignificantly increased response times,\u201d \u201clatency,\u201d \u201cslow queries\u201d  \n\u2022 bug \u2192 \u201csoftware bug,\u201d \u201cGraphQL returns wrong results,\u201d \u201cunauthorized access when using X\u201d  \n\u2022 feature request \u2192 \u201crequesting new functionality,\u201d \u201cwould like to have an option for X\u201d  \n\u2022 others \u2192 anything else not matching the above  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5) Sort the tickets by priority\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTo compare any two tickets, apply these rules in order (move to the next rule only if the previous rule ties):  \n1. A ticket on the advanced plan with category 'downtime' or 'reliability' is prioritized higher.  \n2. A ticket on the base plan with category 'downtime' or 'reliability' is prioritized higher.  \n3. Next, compare categories in this order: downtime > reliability > performance > bug > feature request > others  \n4. If still tied, compare creation time (older tickets first).  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nExample of Prioritization\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nSuppose the following six tickets are among the last 30 open tickets:\n\n\u2022 Ticket #101 \n  \u2013 Plan: advanced  \n  \u2013 Created at: 2023-10-01  \n  \u2013 Description: \u201cOur production environment is down, we see 500 errors everywhere for project ID aaaa1111-bbbb-2222-cccc-3333dddd4444.\u201d  \n  \u2013 Category \u2192 downtime  \n\n\u2022 Ticket #102  \n  \u2013 Plan: base  \n  \u2013 Created at: 2023-09-28  \n  \u2013 Description: \u201cIntermittent request failures are happening for project ID aaaa1111-bbbb-2222-cccc-5555dddd6666.\u201d  \n  \u2013 Category \u2192 reliability  \n\n\u2022 Ticket #103  \n  \u2013 Plan: advanced  \n  \u2013 Created at: 2023-09-29  \n  \u2013 Description: \u201cWe found a bug in event triggers for project ID aaaa1111-bbbb-2222-cccc-7777dddd8888.\u201d  \n  \u2013 Category \u2192 bug  \n\n\u2022 Ticket #104  \n  \u2013 Plan: advanced  \n  \u2013 Created at: 2023-09-28  \n  \u2013 Description: \u201cWe have performance issues with repeated queries for project ID aaaa1111-bbbb-2222-cccc-9999dddd0000.\u201d  \n  \u2013 Category \u2192 performance  \n\n\u2022 Ticket #105  \n  \u2013 Plan: base  \n  \u2013 Created at: 2023-09-27  \n  \u2013 Description: \u201cFeature request: support batch operations on Actions for project ID aaaa1111-bbbb-2222-cccc-1111dddd2222.\u201d  \n  \u2013 Category \u2192 feature request  \n\n\u2022 Ticket #106  \n  \u2013 Plan: base  \n  \u2013 Created at: 2023-09-26  \n  \u2013 Description: \u201cWe\u2019re seeing random 500 errors in production for project ID aaaa1111-bbbb-2222-cccc-9999dddd9999.\u201d  \n  \u2013 Category \u2192 reliability (since the description highlights intermittent 500 errors)  \n\nNow we apply the sorting rules:\n\n1) All advanced plan tickets w/ downtime or reliability come first.  \n   \u2013 Ticket #101 is advanced + downtime \u2192 goes to the top.\n\n2) Next, all base plan tickets w/ downtime or reliability.  \n   \u2013 Ticket #102 (base + reliability)  \n   \u2013 Ticket #106 (base + reliability)  \n   Compare creation time to resolve tie. #106 (2023-09-26) is older than #102 (2023-09-28), thus #106 is higher priority than #102.\n\n3) Among remaining tickets, sort by category order: downtime > reliability > performance > bug > feature request > others.  \n   \u2013 We have #104 (performance), #103 (bug), #105 (feature request). So, after the above downtime/reliability tickets, we put #104, then #103, then #105.\n\nHence, the final sorted order is:\n1) #101 (advanced, downtime)  \n2) #106 (base, reliability)  \n3) #102 (base, reliability)  \n4) #104 (advanced, performance)  \n5) #103 (advanced, bug)  \n6) #105 (base, feature request)  \u2190 this would be 6th if we needed more than 5  \n\nAccordingly, the top 5 tickets to prioritize would be:\n\n<tickets>\n101\n106\n102\n104\n103\n</tickets>\n\nIn your real workflow, after running those queries and applying the classification/sorting logic, you would output the IDs of the top 5 tickets in exactly this format."
  }
]