[
  {
    "timestamp": "2025-01-29T14:53:56.573740",
    "response": {
      "id": "chatcmpl-AuyZbFG4DQgmbeMLGT6sKA9qEzJ28",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is an example workflow illustrating how you could produce the top 5 priority tickets among the last 30 open tickets, given the classification rules and plan priorities. Because the steps require cross-database lookups (support tickets DB vs. control plane DB) as well as classification heuristics beyond standard SQL, the process typically involves:\n\n1) Fetching the last 30 open tickets,\n2) Extracting the project ID via regex from the ticket description,\n3) Looking up the project\u2019s most recent plan in the Control Plane DB,\n4) Classifying each ticket into one of the six categories (downtime, reliability, performance, bug, feature request, others),\n5) Sorting based on the specified priority rules,\n6) Returning the top five ticket IDs.\n\nBelow is an illustrative example of how (in pseudocode) you might accomplish it, followed by the final prioritized list in the requested format. (Note that IDs and descriptions below are fictional to demonstrate the process.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Get last 30 open tickets from the Support Tickets DB\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  SELECT id,\n         description,\n         created_at\n    FROM support_ticket\n   WHERE status = 'open'\n   ORDER BY created_at DESC\n   LIMIT 30;\n\nFor example, assume you receive the following rows (abbreviated for illustration):\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2502 description                                                        \u2502 created_at              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 432 \u2502 \"Project ID: 11111111-2222-3333-4444-555555555555. We have 500      \u2502 2023-10-01 07:11:00+00  \u2502\n\u2502     \u2502 errors and timeouts in production\u2014our app is effectively down.\"     \u2502                         \u2502\n\u2502 765 \u2502 \"We're seeing unstable behavior for project                         \u2502 2023-10-01 08:15:00+00  \u2502\n\u2502     \u2502 11111111-2222-3333-4444-666666666666. Sometimes requests just fail.\"\u2502                         \u2502\n\u2502 234 \u2502 \"Widespread service outage for project                              \u2502 2023-10-02 09:30:00+00  \u2502\n\u2502     \u2502 11111111-2222-3333-4444-777777777777, cannot access console at all.\"\u2502                         \u2502\n\u2502 980 \u2502 \"Seeing longer response times for project                           \u2502 2023-10-03 13:45:00+00  \u2502\n\u2502     \u2502 11111111-2222-3333-4444-999999999999.\"                              \u2502                         \u2502\n\u2502 891 \u2502 \"Feature request for project                                        \u2502 2023-10-03 14:00:00+00  \u2502\n\u2502     \u2502 11111111-2222-3333-4444-888888888888. We need batch operations.\"    \u2502                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n(\u2026 plus up to 25 more tickets, omitted in this example.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2) Extract the project ID from each ticket description\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse a regex, for example:\n  substring(description FROM '([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})')\n\nFor instance:\n\u2022 Ticket #432 \u2192 11111111-2222-3333-4444-555555555555\n\u2022 Ticket #765 \u2192 11111111-2222-3333-4444-666666666666\n\u2022 Ticket #234 \u2192 11111111-2222-3333-4444-777777777777\n\u2022 Ticket #980 \u2192 11111111-2222-3333-4444-999999999999\n\u2022 Ticket #891 \u2192 11111111-2222-3333-4444-888888888888\n\u2026and so on.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3) Look up the most recent plan for each project ID \n   in the Control Plane DB\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  SELECT DISTINCT ON (ppc.project_id)\n         ppc.project_id,\n         p.name AS plan_name\n    FROM project_plan_changelogs ppc\n    JOIN plans p ON p.id = ppc.plan_id\n   WHERE ppc.project_id IN (list of extracted project IDs)\n   ORDER BY ppc.project_id, ppc.created_at DESC;\n\nSuppose that returns:\n\n\u2022 project_id=11111111-2222-3333-4444-555555555555 \u2192 plan_name='advanced'\n\u2022 project_id=11111111-2222-3333-4444-666666666666 \u2192 plan_name='base'\n\u2022 project_id=11111111-2222-3333-4444-777777777777 \u2192 plan_name='free'\n\u2022 project_id=11111111-2222-3333-4444-999999999999 \u2192 plan_name='free'\n\u2022 project_id=11111111-2222-3333-4444-888888888888 \u2192 plan_name='advanced'\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4) Classify each ticket\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUsing the provided guidance:\n\n\u2022 downtime \u2192 widespread service disruptions / 500 errors\n\u2022 reliability \u2192 intermittent or random request failures / instability\n\u2022 performance \u2192 slow or high latency\n\u2022 bug \u2192 an actual software bug\n\u2022 feature request \u2192 requesting new functionality\n\u2022 others \u2192 anything else that doesn\u2019t match above\n\nApplying these to our example:\n\u2022 Ticket 432: \u201c500 errors and timeouts, production effectively down\u201d \u2192 downtime\n\u2022 Ticket 765: \u201cunstable behavior\u2026requests just fail sometimes\u201d \u2192 reliability\n\u2022 Ticket 234: \u201cwidespread service outage, cannot access console\u201d \u2192 downtime\n\u2022 Ticket 980: \u201clonger response times\u201d \u2192 performance\n\u2022 Ticket 891: \u201cFeature request \u2026 batch operations\u201d \u2192 feature request\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5) Sort based on the specified priority rules\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nPriority rules, in tie-break order:\n  1. Advanced plan + (downtime or reliability) is higher.  \n  2. Base plan + (downtime or reliability) is next higher.  \n  3. Free plan + downtime is next higher.  \n  4. Then category order: downtime > reliability > performance > bug > feature request > others  \n  5. Finally, older creation time first if still tied.\n\nLet\u2019s see how our five example tickets stack up:\n\nTicket #432  plan=advanced, category=downtime\nTicket #765  plan=base,      category=reliability\nTicket #234  plan=free,      category=downtime\nTicket #980  plan=free,      category=performance\nTicket #891  plan=advanced,  category=feature request\n\nApplying rule (1): Ticket 432 (advanced + downtime) \u2192 top priority  \nApplying rule (2): Ticket 765 (base + reliability) \u2192 second priority  \nApplying rule (3): Ticket 234 (free + downtime) \u2192 third priority  \nRemaining two (ticket #980 with performance, ticket #891 with feature request) do not match any special plan-based rule, so we fall back to general category priority:\n\u2022 performance > feature request, so #980 outranks #891.\nNo creation-time ties to resolve here, so final order is:\n1) #432  \n2) #765  \n3) #234  \n4) #980  \n5) #891  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n6) Return the top 5 ticket IDs in the requested format\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n<tickets>\n432\n765\n234\n980\n891\n</tickets>\n\nAbove is the final list of the top 5 tickets you should prioritize, based on the sample data, classification logic, and sorting rules. If you run this workflow on real data, you would perform the same multi-step lookup, classification, and sorting, then output the resulting IDs similarly.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738142575,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 6543,
        "prompt_tokens": 1058,
        "total_tokens": 7601,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 4800,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]