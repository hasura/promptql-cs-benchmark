[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 10 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the free plan with category 'downtime', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an example process demonstrating how to arrive at the requested sorted list of top 5 tickets among the 10 most recently created open tickets. The steps include:  \n1) Retrieving the last 10 open tickets.  \n2) Extracting the project UUID from each ticket description.  \n3) Looking up the most recent plan for each project.  \n4) Classifying each ticket according to the provided category definitions.  \n5) Sorting the tickets by the specified priority rules.  \n6) Returning the top five ticket IDs.\n\n-------------------------------------------------------------------------------\n1) Retrieve the last 10 open tickets\n-------------------------------------------------------------------------------\nUse the Support Tickets Database:\n\nSELECT id,\n       subject,\n       description,\n       created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 10;\n\nThe above query provides the 10 most recently created tickets that are still open.\n\n-------------------------------------------------------------------------------\n2) Extract the project UUID from each ticket description\n-------------------------------------------------------------------------------\nTypically, you would loop through each ticket in your application logic (or execute a SQL function/regexp) to find valid UUIDs. For instance, in PostgreSQL you could do something like:\n\nSELECT id AS ticket_id,\n       REGEXP_MATCHES(description, '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}') AS matches\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 10;\n\n(This returns an array of matches containing the UUID, if present.)\n\n-------------------------------------------------------------------------------\n3) Look up the most recent plan for each project\n-------------------------------------------------------------------------------\nAfter extracting project_id from a ticket (call it :project_id), query the Control Plane Database to find the latest plan:\n\nSELECT p.name AS plan_name\nFROM project_plan_changelogs ppc\nJOIN plans p ON p.id = ppc.plan_id\nWHERE ppc.project_id = :project_id\nORDER BY ppc.created_at DESC\nLIMIT 1;\n\nTypical plan_name values might be \u201cfree\u201d, \u201cbase\u201d, \u201cadvanced\u201d, etc.\n\n-------------------------------------------------------------------------------\n4) Classify each ticket\n-------------------------------------------------------------------------------\nBased on the ticket description (and/or subject), you would classify each ticket into one of:\n\u2022 downtime  \n\u2022 reliability  \n\u2022 performance  \n\u2022 bug  \n\u2022 feature request  \n\u2022 others  \n\nBy matching key patterns in the description or subject, you determine which category fits best.\n\n-------------------------------------------------------------------------------\n5) Sort the 10 tickets by the specified priority rules\n-------------------------------------------------------------------------------\nPriority comparison sequence (applied in order until a difference is found):  \n\u2022 If on \u201cadvanced\u201d plan AND (downtime or reliability), put higher.  \n\u2022 If on \u201cbase\u201d plan AND (downtime or reliability), put higher.  \n\u2022 If on \u201cfree\u201d plan AND downtime, put higher.  \n\u2022 Then, if none of the above apply, sort by category using the priority order:  \n  downtime > reliability > performance > bug > feature request > others  \n\u2022 For tickets in the same category, older created_at is higher priority (i.e. sort ascending by created_at).\n\n-------------------------------------------------------------------------------\n6) Return the top 5 ticket IDs\n-------------------------------------------------------------------------------\nBelow is an illustrative example. Suppose the 10 open tickets (sorted by created_at descending) look like this after parsing plan and classification:\n\n   Ticket ID | Created At           | Project UUID                          | Plan      | Category      | Classification Explanation\n----------------------------------------------------------------------------------------------------------------------------\n1) 1007      | 2023-10-10 10:05 UTC | 2f41279d-7571-4444-b1b6-b4ae50d8b23a  | advanced  | reliability   | Intermittent request failures\n2) 1012      | 2023-10-10 09:58 UTC | 5bda1383-706d-4da5-a911-7c10d6a6de58  | free      | downtime      | Complete outage with 500 errors\n3) 1003      | 2023-10-10 09:40 UTC | d4a062e5-432e-4813-b6fc-de9bc07e7903  | base      | reliability   | Random disconnects in production\n4) 1010      | 2023-10-10 09:37 UTC | 8a3d248a-a71c-4fdc-a35c-6d6bac6ce3cc  | advanced  | bug           | \u201c_in\u201d operator returning unexpected results\n5) 1002      | 2023-10-10 09:25 UTC | 3af24a86-bc96-4a14-8f6b-866f423be85f  | free      | feature req.  | Request for batch operations in Actions\n6) 1015      | 2023-10-10 09:20 UTC | b445dbd5-3c9b-45d8-8774-1d306fc7a52b  | advanced  | downtime      | Service unavailable for all queries\n7) 1011      | 2023-10-10 09:10 UTC | (none found)                          | base      | others        | No valid project ID in description \n8) 1008      | 2023-10-10 09:05 UTC | 29890df9-d75a-4776-ae00-cffde40bbb78  | free      | reliability   | Intermittent 503 errors \n9) 1013      | 2023-10-10 09:00 UTC | 06dccbf1-69fa-4c57-8cf6-9f01525e6561  | advanced  | performance   | High latency on triggers\n10)1009      | 2023-10-10 08:55 UTC | 5f497c93-efb9-42e4-8143-af3c431f85c6  | base      | downtime      | Production environment entirely down\n\nNext, we apply the rules pairwise:\n\n1. (1015) advanced & downtime \u2192 highest priority group  \n2. (1007) advanced & reliability \u2192 highest priority group (ties with advanced+reliability/downtime)  \n3. (1009) base & downtime \u2192 next highest priority group  \n4. (1003) base & reliability \u2192 next highest priority group  \n5. (1012) free & downtime \u2192 next highest priority group  \n6. Then go by category order for the rest (downtime > reliability > performance > bug > feature request > others).  \n\nAmong tickets in the same category, older created_at is prioritized higher.\n\nFollowing these rules, the sorted priority order is:\n\nHighest cluster (advanced downtime/reliability):\n\u2022 1015 (advanced / downtime, older than 1007)  \n\u2022 1007 (advanced / reliability)  \n\nNext cluster (base downtime/reliability):\n\u2022 1009 (base / downtime)  \n\u2022 1003 (base / reliability)  \n\nNext cluster (free downtime):\n\u2022 1012 (free / downtime)  \n\nNow handle remaining tickets by category ranking \u201cdowntime > reliability > performance > bug > feature request > others\u201d:\n(But in this example, the next tickets do not outrank the free downtime ticket above, so they follow in this order after 1012.)\n\nThe top five tickets in final sorted order are:\n1) 1015  \n2) 1007  \n3) 1009  \n4) 1003  \n5) 1012  \n\n-------------------------------------------------------------------------------\nFinal Output\n-------------------------------------------------------------------------------\nReturn just the list of ticket IDs, each on its own line, within <tickets> \u2026 </tickets>:\n\n<tickets>\n1015\n1007\n1009\n1003\n1012\n</tickets>\n\n-------------------------------------------------------------------------------\nNotes\n-------------------------------------------------------------------------------\n\u2022 In a real scenario, you would run the queries as shown above to retrieve the actual ticket data, parse the relevant fields, and then implement the sorting logic.  \n\u2022 If a ticket\u2019s description does not have a UUID, treat project_id as unknown (which effectively might place it behind tickets that do have an identified project and plan, unless you have a separate policy for that scenario).  \n\u2022 This example assumes plan names like \u201cfree\u201d, \u201cbase\u201d, \u201cadvanced\u201d; adapt to your actual plan naming in the \u201cplans\u201d table.  \n\nThis demonstrates how to produce the final output in the requested format, reflecting the correct prioritization according to your rules."
  }
]