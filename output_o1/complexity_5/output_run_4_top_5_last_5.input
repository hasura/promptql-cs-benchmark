[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the free plan with category 'downtime', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an illustrative example of how you might retrieve and prioritize your top 5 open tickets. Since there is no real data in this example, the final IDs and classification are hypothetical. In an actual deployment, you would:\n\n1) Query the last 5 open tickets.  \n2) Extract the project ID from each ticket\u2019s description (using a UUID regex).  \n3) Look up the project\u2019s most recent plan from the control plane database.  \n4) Classify each ticket into the requested categories (downtime, reliability, performance, bug, feature request, others).  \n5) Sort them according to the rules provided.  \n6) Return the finalized list in the requested XML-like format.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Get the last 5 open tickets from the support tickets database:\n\n  SELECT\n    id,\n    description,\n    created_at\n  FROM support_ticket\n  WHERE status = 'open'\n  ORDER BY created_at DESC\n  LIMIT 5;\n\n2) Extract the project UUID from each ticket\u2019s description:\n\n  -- Example approach using regular expressions in PostgreSQL\n  WITH last_five AS (\n    SELECT\n      id,\n      description,\n      created_at,\n      substring(description FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})') AS project_id\n    FROM support_ticket\n    WHERE status = 'open'\n    ORDER BY created_at DESC\n    LIMIT 5\n  )\n  SELECT * FROM last_five;\n\n3) For each extracted project_id, get the most recent plan_id (and therefore plan name) from the project_plan_changelogs and plans tables in the control plane database:\n\n  SELECT\n    p.name AS plan_name\n  FROM project_plan_changelogs ppc\n  JOIN plans p\n    ON ppc.plan_id = p.id\n  WHERE ppc.project_id = :project_id\n  ORDER BY ppc.created_at DESC\n  LIMIT 1;\n\n4) Classify each ticket by scanning the subject/description against your classification rules:\n   \u2022 downtime  \n   \u2022 reliability  \n   \u2022 performance  \n   \u2022 bug  \n   \u2022 feature request  \n   \u2022 others\n\n5) Sort the 5 tickets according to the priority rules, comparing them pairwise in this order:\n   (a) Tickets on the advanced plan with category 'downtime' or 'reliability' first.  \n   (b) Then tickets on the base plan with category 'downtime' or 'reliability'.  \n   (c) Then tickets on the free plan with category 'downtime'.  \n   (d) Then by category order: downtime > reliability > performance > bug > feature request > others.  \n   (e) In case of ties so far, compare creation times (older tickets first).\n\nExample Illustration\n\nImagine you have 5 open tickets with the following details and derived fields:\n\nTicket #1  \n\u2022 id = 101  \n\u2022 description: \u201cOur production environment is down for project 11111111-aaaa-bbbb-cccc-222222222222. \u2026\u201d  \n\u2022 extracted project_id = 11111111-aaaa-bbbb-cccc-222222222222  \n\u2022 plan_name = advanced  \n\u2022 creation time = 2023-01-02 10:00:00 UTC  \n\u2022 classified category = downtime  \n\nTicket #2  \n\u2022 id = 202  \n\u2022 description: \u201cWe sometimes see random request failures in project 22222222-aaaa-bbbb-cccc-333333333333. \u2026\u201d  \n\u2022 extracted project_id = 22222222-aaaa-bbbb-cccc-333333333333  \n\u2022 plan_name = free  \n\u2022 creation time = 2023-01-03 09:00:00 UTC  \n\u2022 classified category = reliability  \n\nTicket #3  \n\u2022 id = 303  \n\u2022 description: \u201cWe need new GraphQL features for project 33333333-aaaa-bbbb-cccc-444444444444 \u2026\u201d  \n\u2022 extracted project_id = 33333333-aaaa-bbbb-cccc-444444444444  \n\u2022 plan_name = advanced  \n\u2022 creation time = 2023-01-03 08:00:00 UTC  \n\u2022 classified category = feature request  \n\nTicket #4  \n\u2022 id = 404  \n\u2022 description: \u201cHigh latency and queries timing out for project 44444444-aaaa-bbbb-cccc-555555555555 \u2026\u201d  \n\u2022 extracted project_id = 44444444-aaaa-bbbb-cccc-555555555555  \n\u2022 plan_name = base  \n\u2022 creation time = 2023-01-02 20:00:00 UTC  \n\u2022 classified category = performance  \n\nTicket #5  \n\u2022 id = 505  \n\u2022 description: \u201cWe discovered a bug with the Actions feature in project 55555555-aaaa-bbbb-cccc-666666666666 \u2026\u201d  \n\u2022 extracted project_id = 55555555-aaaa-bbbb-cccc-666666666666  \n\u2022 plan_name = base  \n\u2022 creation time = 2023-01-01 12:00:00 UTC  \n\u2022 classified category = bug  \n\nApply the Priority Sorting Rules\n\n1. Advanced plan + downtime/reliability come first.  \n   \u2022 Ticket #1 is advanced + downtime \u2192 highest priority  \n   \u2022 Ticket #2 is free + reliability (not advanced, skip for this rule)  \n   \u2022 Ticket #3 is advanced + feature request (not downtime/reliability, skip here)  \n   \u2022 Ticket #4 is base + performance (skip)  \n   \u2022 Ticket #5 is base + bug (skip)\n\n2. Base plan + downtime/reliability next.  \n   \u2022 None of these base-plan tickets (#4, #5) are downtime/reliability, so skip.\n\n3. Free plan + downtime next.  \n   \u2022 Ticket #2 is free + reliability, not downtime, so skip.\n\n4. Then rank remaining by category order (downtime > reliability > performance > bug > feature request > others):  \n   \u2022 Remaining tickets: #2 (reliability), #3 (feature request), #4 (performance), #5 (bug)  \n   \u2022 Category order: downtime(1) > reliability(2) > performance(3) > bug(4) > feature request(5) > others(6)  \n   \u2022 So we place #2 (reliability) first among these, then #4 (performance), then #5 (bug), then #3 (feature request).\n\n5. If two tickets remain tied after category, compare creation times (older first). In this illustration, there\u2019s no exact category tie, so we accept the category order.\n\nFinal priority order of ticket IDs:  \n\u2022 (1) Ticket #1 (advanced + downtime)  \n\u2022 (2) Ticket #2 (free + reliability)  \n\u2022 (3) Ticket #4 (base + performance)  \n\u2022 (4) Ticket #5 (base + bug)  \n\u2022 (5) Ticket #3 (advanced + feature request)\n\nHence, the final sorted list:\n\n<tickets>\n101\n202\n404\n505\n303\n</tickets>\n\nIn a live scenario, you would programmatically:\n\u2022 Fetch the last 5 open tickets.  \n\u2022 Extract their project UUIDs and look up their plans in the control plane database.  \n\u2022 Match their subject/description to the relevant category.  \n\u2022 Then apply the sorting rules to decide the order.  \n\u2022 Finally, output the ticket IDs in the requested format."
  }
]