[
  {
    "timestamp": "2025-01-29T14:54:35.533876",
    "response": {
      "id": "chatcmpl-AuyaeK1yaRkaEa6B82iZ4J1Ce9z2M",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is an illustrative example of how you might retrieve and prioritize your top 5 open tickets. Since there is no real data in this example, the final IDs and classification are hypothetical. In an actual deployment, you would:\n\n1) Query the last 5 open tickets.  \n2) Extract the project ID from each ticket\u2019s description (using a UUID regex).  \n3) Look up the project\u2019s most recent plan from the control plane database.  \n4) Classify each ticket into the requested categories (downtime, reliability, performance, bug, feature request, others).  \n5) Sort them according to the rules provided.  \n6) Return the finalized list in the requested XML-like format.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Get the last 5 open tickets from the support tickets database:\n\n  SELECT\n    id,\n    description,\n    created_at\n  FROM support_ticket\n  WHERE status = 'open'\n  ORDER BY created_at DESC\n  LIMIT 5;\n\n2) Extract the project UUID from each ticket\u2019s description:\n\n  -- Example approach using regular expressions in PostgreSQL\n  WITH last_five AS (\n    SELECT\n      id,\n      description,\n      created_at,\n      substring(description FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})') AS project_id\n    FROM support_ticket\n    WHERE status = 'open'\n    ORDER BY created_at DESC\n    LIMIT 5\n  )\n  SELECT * FROM last_five;\n\n3) For each extracted project_id, get the most recent plan_id (and therefore plan name) from the project_plan_changelogs and plans tables in the control plane database:\n\n  SELECT\n    p.name AS plan_name\n  FROM project_plan_changelogs ppc\n  JOIN plans p\n    ON ppc.plan_id = p.id\n  WHERE ppc.project_id = :project_id\n  ORDER BY ppc.created_at DESC\n  LIMIT 1;\n\n4) Classify each ticket by scanning the subject/description against your classification rules:\n   \u2022 downtime  \n   \u2022 reliability  \n   \u2022 performance  \n   \u2022 bug  \n   \u2022 feature request  \n   \u2022 others\n\n5) Sort the 5 tickets according to the priority rules, comparing them pairwise in this order:\n   (a) Tickets on the advanced plan with category 'downtime' or 'reliability' first.  \n   (b) Then tickets on the base plan with category 'downtime' or 'reliability'.  \n   (c) Then tickets on the free plan with category 'downtime'.  \n   (d) Then by category order: downtime > reliability > performance > bug > feature request > others.  \n   (e) In case of ties so far, compare creation times (older tickets first).\n\nExample Illustration\n\nImagine you have 5 open tickets with the following details and derived fields:\n\nTicket #1  \n\u2022 id = 101  \n\u2022 description: \u201cOur production environment is down for project 11111111-aaaa-bbbb-cccc-222222222222. \u2026\u201d  \n\u2022 extracted project_id = 11111111-aaaa-bbbb-cccc-222222222222  \n\u2022 plan_name = advanced  \n\u2022 creation time = 2023-01-02 10:00:00 UTC  \n\u2022 classified category = downtime  \n\nTicket #2  \n\u2022 id = 202  \n\u2022 description: \u201cWe sometimes see random request failures in project 22222222-aaaa-bbbb-cccc-333333333333. \u2026\u201d  \n\u2022 extracted project_id = 22222222-aaaa-bbbb-cccc-333333333333  \n\u2022 plan_name = free  \n\u2022 creation time = 2023-01-03 09:00:00 UTC  \n\u2022 classified category = reliability  \n\nTicket #3  \n\u2022 id = 303  \n\u2022 description: \u201cWe need new GraphQL features for project 33333333-aaaa-bbbb-cccc-444444444444 \u2026\u201d  \n\u2022 extracted project_id = 33333333-aaaa-bbbb-cccc-444444444444  \n\u2022 plan_name = advanced  \n\u2022 creation time = 2023-01-03 08:00:00 UTC  \n\u2022 classified category = feature request  \n\nTicket #4  \n\u2022 id = 404  \n\u2022 description: \u201cHigh latency and queries timing out for project 44444444-aaaa-bbbb-cccc-555555555555 \u2026\u201d  \n\u2022 extracted project_id = 44444444-aaaa-bbbb-cccc-555555555555  \n\u2022 plan_name = base  \n\u2022 creation time = 2023-01-02 20:00:00 UTC  \n\u2022 classified category = performance  \n\nTicket #5  \n\u2022 id = 505  \n\u2022 description: \u201cWe discovered a bug with the Actions feature in project 55555555-aaaa-bbbb-cccc-666666666666 \u2026\u201d  \n\u2022 extracted project_id = 55555555-aaaa-bbbb-cccc-666666666666  \n\u2022 plan_name = base  \n\u2022 creation time = 2023-01-01 12:00:00 UTC  \n\u2022 classified category = bug  \n\nApply the Priority Sorting Rules\n\n1. Advanced plan + downtime/reliability come first.  \n   \u2022 Ticket #1 is advanced + downtime \u2192 highest priority  \n   \u2022 Ticket #2 is free + reliability (not advanced, skip for this rule)  \n   \u2022 Ticket #3 is advanced + feature request (not downtime/reliability, skip here)  \n   \u2022 Ticket #4 is base + performance (skip)  \n   \u2022 Ticket #5 is base + bug (skip)\n\n2. Base plan + downtime/reliability next.  \n   \u2022 None of these base-plan tickets (#4, #5) are downtime/reliability, so skip.\n\n3. Free plan + downtime next.  \n   \u2022 Ticket #2 is free + reliability, not downtime, so skip.\n\n4. Then rank remaining by category order (downtime > reliability > performance > bug > feature request > others):  \n   \u2022 Remaining tickets: #2 (reliability), #3 (feature request), #4 (performance), #5 (bug)  \n   \u2022 Category order: downtime(1) > reliability(2) > performance(3) > bug(4) > feature request(5) > others(6)  \n   \u2022 So we place #2 (reliability) first among these, then #4 (performance), then #5 (bug), then #3 (feature request).\n\n5. If two tickets remain tied after category, compare creation times (older first). In this illustration, there\u2019s no exact category tie, so we accept the category order.\n\nFinal priority order of ticket IDs:  \n\u2022 (1) Ticket #1 (advanced + downtime)  \n\u2022 (2) Ticket #2 (free + reliability)  \n\u2022 (3) Ticket #4 (base + performance)  \n\u2022 (4) Ticket #5 (base + bug)  \n\u2022 (5) Ticket #3 (advanced + feature request)\n\nHence, the final sorted list:\n\n<tickets>\n101\n202\n404\n505\n303\n</tickets>\n\nIn a live scenario, you would programmatically:\n\u2022 Fetch the last 5 open tickets.  \n\u2022 Extract their project UUIDs and look up their plans in the control plane database.  \n\u2022 Match their subject/description to the relevant category.  \n\u2022 Then apply the sorting rules to decide the order.  \n\u2022 Finally, output the ticket IDs in the requested format.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738142640,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 4519,
        "prompt_tokens": 1058,
        "total_tokens": 5577,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 2944,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]