[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 20 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the free plan with category 'downtime', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an outline of how you can derive the top 5 tickets to prioritize, given the requirements. Because actual data is not provided here, the example at the end shows how the final output might look once you run these queries and apply the classification and sorting rules on real data.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Fetch the last 20 open tickets\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse your Support Tickets database to retrieve up to 20 \u201copen\u201d tickets. For simplicity, we include only the columns necessary (feel free to select additional columns if they\u2019re useful):\n\n-------------------------------------------\nSELECT \n  id, \n  subject, \n  description, \n  created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 20;\n-------------------------------------------\n\nThis will give you the most recently created 20 open tickets (or fewer if fewer than 20 are open).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2) Extract the Project ID (UUID) from each ticket\u2019s description\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFor each ticket\u2019s \u201cdescription\u201d text, scan for a UUID using a pattern like:\n\n-------------------------------------------\n([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\n-------------------------------------------\n\nIf no match is found, treat the project_id as NULL (or unknown).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3) Look up the most recent plan for each project\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFor each extracted project_id, query your Control Plane database:\n\n-------------------------------------------\nSELECT p.name AS plan_name\nFROM project_plan_changelogs AS ppc\nJOIN plans AS p ON p.id = ppc.plan_id\nWHERE ppc.project_id = '<PROJECT_ID_PLACEHOLDER>'\nORDER BY ppc.created_at DESC\nLIMIT 1;\n-------------------------------------------\n\nIf no record is found, you might treat the plan as \"free\" or \"unknown.\"\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4) Classify each ticket into downtime, reliability, performance, bug, \n   feature request, or others\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse simple keyword searches (in either subject or description) to determine the category:\n\n\u2022 downtime: words like \u201coutage\u201d, \u201cunable to access console\u201d, \u201ccannot reach GraphQL endpoint\u201d, \u201cproduction environment down\u201d, \u201c500 error\u201d, \u201ctime out\u201d  \n\u2022 reliability: words like \u201cintermittent\u201d, \u201crandom failure\u201d, \u201cunreliable\u201d, \u201cunstable\u201d  \n\u2022 performance: words like \u201cslow\u201d, \u201clatency\u201d, \u201cperformance issue\u201d, \u201chigh response time\u201d  \n\u2022 bug: words like \u201cbug\u201d, \u201cwrong results\u201d, \u201cunauthorized access allowed\u201d  \n\u2022 feature request: words like \u201cfeature request\u201d, \u201cenhancement\u201d, \u201cwould like to have new functionality\u201d  \n\u2022 others: everything else  \n\nA simple approach could be a prioritized keyword search. The first matching category \u201cwins.\u201d If you find multiple relevant words, whichever category\u2019s word appears first in your search logic is used.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5) Sort the filtered tickets by priority\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFrom these 20 tickets, apply your sorting rules in the following order. When comparing two tickets A and B:\n\n1. If a ticket is on the advanced plan with category \u201cdowntime\u201d or \u201creliability,\u201d it ranks higher.  \n2. If a ticket is on the base plan with category \u201cdowntime\u201d or \u201creliability,\u201d it ranks higher.  \n3. If a ticket is on the free plan with category \u201cdowntime,\u201d it ranks higher.  \n4. Then compare categories by this order (descending in importance):  \n   downtime \u2192 reliability \u2192 performance \u2192 bug \u2192 feature request \u2192 others  \n5. If still tied, compare created_at (older ticket = higher priority).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n6) Pick the top 5 and return them in the requested format\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFinally, select only the top 5 tickets after applying the above sort logic, and return them in the format:\n\n<tickets>\nTICKET_ID_1\nTICKET_ID_2\nTICKET_ID_3\nTICKET_ID_4\nTICKET_ID_5\n</tickets>\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nExample End-to-End (Fictitious Data)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nBelow is an illustrative example of how your final result might look once the above queries and sorting logic are applied. The ticket IDs and categories are purely hypothetical:\n\n-- 1) Suppose you retrieved these 6 open tickets (just an example):\n id   | subject                                   | description                                                                                 | created_at                     \n------+-------------------------------------------+---------------------------------------------------------------------------------------------+-------------------------------\n 101  | Production is completely down             | We are seeing a 500 error repeatedly. Project ID: 11111111-2222-3333-4444-555555555555       | 2023-09-11 15:23:10\n 102  | Slow queries in production                | Queries are much slower than normal. PId: aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee               | 2023-09-12 07:10:45\n 103  | Bug in permissions                        | We found a bug. project=12345678-1234-1234-1234-1234567890ab                                 | 2023-09-12 08:43:00\n 104  | Feature request for extra action settings | I'd love an enhancement to batch actions.                                                   | 2023-09-13 11:03:29\n 105  | Random 503 errors observed               | We get random 503 errors in prod. Project UUID: 22222222-3333-4444-5555-666666666666         | 2023-09-13 12:01:09\n 106  | Another user question                     | Non-urgent question about usage.                                                            | 2023-09-14 09:15:00\n\n-- 2) Extract project IDs from description:\n Ticket 101 => project_id = 11111111-2222-3333-4444-555555555555\n Ticket 102 => project_id = aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n Ticket 103 => project_id = 12345678-1234-1234-1234-1234567890ab\n Ticket 104 => project_id = NULL (no mention)\n Ticket 105 => project_id = 22222222-3333-4444-5555-666666666666\n Ticket 106 => project_id = NULL (no mention)\n\n-- 3) Check plan for each project (fictitious final plan):\n 11111111-2222-3333-4444-555555555555 => advanced\n aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee => base\n 12345678-1234-1234-1234-1234567890ab => advanced\n 22222222-3333-4444-5555-666666666666 => free\n NULL => unknown\n\n-- 4) Classify tickets:\n 101 => mentions \u201c500 error\u2026 production completely down\u201d => downtime\n 102 => \u201cSlow queries\u2026 slower than normal\u201d => performance\n 103 => \u201cbug in permissions\u201d => bug\n 104 => \u201cfeature request\u201d => feature request\n 105 => \u201crandom 503 errors in prod\u201d => reliability\n 106 => unclear, no typical keywords => others\n\n-- 5) Sort by priority:\n   \u2022 Ticket 101: plan=advanced, category=downtime\n   \u2022 Ticket 105: plan=free, category=reliability\n   \u2022 Ticket 105 vs 102 => 105 (reliability on free plan) only outranks 102\u2019s performance if the \u201cdowntime on free plan\u201d rule existed, but we only have a reliability vs performance with plan consideration. According to the sorting rules: \n        - advanced downtime or reliability is top\n        - base downtime or reliability is next\n        - free downtime next\n        - then downtime > reliability > performance > bug > feature request > others\n     So let\u2019s systematically compare:\n\n   Ticket 101 (adv + downtime) outranks everything else.  \n   Among the rest: \n     - Ticket 105 (free + reliability)\n     - Ticket 102 (performance)\n     - Ticket 103 (bug)\n     - Ticket 104 (feature request)\n     - Ticket 106 (others)\n   Compare categories in order \u2192 reliability outranks performance, bug, feature request, others. So ticket 105 is next. \n   Then 102 (performance) outranks 103 (bug), 104 (feature request), 106 (others).  \n   Then 103 (bug) outranks 104 (feature request) which outranks 106 (others).\n   Therefore final sorted order of these 6 is:  \n     1) 101  (adv + downtime)  \n     2) 105  (free + reliability)  \n     3) 102  (any plan + performance)  \n     4) 103  (bug)  \n     5) 104  (feature request)  \n     6) 106  (others)\n\n-- 6) Pick top 5 and return:\n<tickets>\n101\n105\n102\n103\n104\n</tickets>\n\nThat is the final output (the top 5 tickets in descending priority).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFinal Notes\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 In your actual workflow, you would gather the 20 open tickets, parse each description for the UUID, look up the plan name, do the category classification, apply the priority rules, and then return the final top 5 ticket IDs in the requested format.  \n\u2022 If some tickets have no identifiable project ID, you could consider them as \u201cunknown\u201d plan or treat them as \u201cfree\u201d (depending on your business rules).  \n\u2022 Be mindful of subtle edge cases (e.g., tickets referencing multiple possible UUIDs, multiple plan changes for a project, or multiple keywords that could match different categories).  \n\nOnce you have implemented this logic with real data, you should get a final, stable list of the 5 highest-priority tickets in:\n\n<tickets>\nTICKET_ID_1\nTICKET_ID_2\nTICKET_ID_3\nTICKET_ID_4\nTICKET_ID_5\n</tickets>"
  }
]