[
  {
    "timestamp": "2025-01-29T13:23:09.980463",
    "response": {
      "id": "chatcmpl-AuxACFB6JHwAGycEbrwRqUFWFEjeu",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is an outline of how to retrieve the last 30 \u201copen\u201d tickets, extract the project ID from each ticket description, determine the project\u2019s latest plan, classify each ticket, then sort and return the top 5 ticket IDs according to the specified priority rules. Because the underlying data may vary, the example final output below is illustrative.\n\n--------------------------------------------------------------------------------\n1) Fetch the last 30 open tickets from the support tickets database\n--------------------------------------------------------------------------------\nUse a query similar to:\n\nSELECT\n  id,\n  description,\n  created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 30;\n\n--------------------------------------------------------------------------------\n2) Extract the project ID from each ticket description\n--------------------------------------------------------------------------------\nProject IDs are UUIDs, so you can look for any substring that matches the UUID pattern:\n\n[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\n\nIn pseudocode:\n\nfor each ticket in results:\n  match = regex(description, pattern=\"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\")\n  project_id = match if found else null\n\n--------------------------------------------------------------------------------\n3) Look up that project\u2019s latest plan in the control plane\n--------------------------------------------------------------------------------\nWith the extracted project_id, you can look up the latest plan via the project_plan_changelogs and plans tables:\n\nSELECT pl.name AS plan_name\nFROM project_plan_changelogs pc\nJOIN plans pl ON pc.plan_id = pl.id\nWHERE pc.project_id = '<EXTRACTED_PROJECT_ID>'\nORDER BY pc.created_at DESC\nLIMIT 1;\n\n--------------------------------------------------------------------------------\n4) Classify each ticket into one of the categories\n--------------------------------------------------------------------------------\nUsing the ticket\u2019s description (or subject), look for relevant keywords/phrases to decide among:\n\u2022 downtime\n\u2022 reliability\n\u2022 performance\n\u2022 bug\n\u2022 feature request\n\u2022 others\n\nClassification examples:\n\u2022 Contains \u201cwidespread service disruption,\u201d \u201ccannot access console,\u201d \u201c500 errors\u201d \u2192 downtime\n\u2022 Mentions \u201coccasional request failures,\u201d \u201crandom timeouts\u201d \u2192 reliability\n\u2022 Mentions \u201cvery slow response times,\u201d \u201chigh latency,\u201d \u201cperformance issue\u201d \u2192 performance\n\u2022 Mentions \u201cunexpected or incorrect functionality,\u201d \u201creturned wrong results\u201d \u2192 bug\n\u2022 Mentions \u201cwould like a new feature,\u201d \u201cenhancement request,\u201d \u201cfeature request\u201d \u2192 feature request\n\u2022 Everything else \u2192 others\n\n--------------------------------------------------------------------------------\n5) Sort the 30 tickets and pick the top 5 using the custom priority rules\n--------------------------------------------------------------------------------\nPriority rules, in order:\n  a) If a ticket is on the \"advanced\" plan and has category = 'downtime' or 'reliability', it outranks all others.\n  b) Then sort by ticket category, using this order (highest to lowest):\n     1. downtime\n     2. reliability\n     3. performance\n     4. bug\n     5. feature request\n     6. others\n  c) If there\u2019s still a tie, pick the older ticket first (compare created_at ascending).\n\n--------------------------------------------------------------------------------\n6) Return the top 5 ticket IDs\n--------------------------------------------------------------------------------\nAfter applying the above rules, take the first 5 tickets from your sorted list and return them as follows:\n\n<tickets>\nTICKET_ID_1\nTICKET_ID_2\nTICKET_ID_3\nTICKET_ID_4\nTICKET_ID_5\n</tickets>\n\n--------------------------------------------------------------------------------\nExample of final output (assuming the IDs below ended up on top after sorting)\n--------------------------------------------------------------------------------\n\n<tickets>\n1012\n1007\n994\n1001\n987\n</tickets>\n\n--------------------------------------------------------------------------------\nComplete Summary\n--------------------------------------------------------------------------------\n1. SELECT last 30 open tickets (ordered by newest first).\n2. For each, parse description to extract the UUID project_id (if present).\n3. Query the control plane to get the project\u2019s most recent plan.\n4. Classify the ticket by content.\n5. Sort using the custom rules (advanced downtime/reliability first, then category, then older is higher priority).\n6. Return the top 5 in the requested <tickets>\u2026</tickets> format.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738137156,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 3858,
        "prompt_tokens": 1010,
        "total_tokens": 4868,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 2944,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]