[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 10 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an illustrative example of how one might derive and prioritize the top 5 support tickets among the last 10 open tickets using the rules you specified. Because no specific data was provided in your request, this example shows the process with hypothetical tickets and demonstrates the final output format (<tickets> \u2026 </tickets>).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Retrieve the last 10 open tickets, sorted by creation time:\n   SELECT id,\n          description,\n          created_at\n     FROM support_ticket\n    WHERE status = 'open'\n ORDER BY created_at DESC\n    LIMIT 10;\n\n2) For each of these 10 tickets:\n   \u2022 Extract the project ID (UUID) from the \u201cdescription\u201d using a regex pattern like:\n       -- Sample regex for UUID:\n       --   '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'\n   \u2022 Look up the project\u2019s most recent plan:\n       SELECT c.plan_id,\n              p.name AS plan_name\n         FROM project_plan_changelogs c\n         JOIN plans p\n           ON p.id = c.plan_id\n        WHERE c.project_id = '<extracted-uuid-from-description>'\n     ORDER BY c.created_at DESC\n        LIMIT 1;\n   \u2022 Classify the ticket based on its description:\n       - downtime, reliability, performance, bug, feature request, or others\n   \u2022 Record the ticket\u2019s created_at time.\n\n3) Apply the prioritization rules pairwise:\n   a) Advanced plan + (downtime or reliability) tickets get highest priority overall.\n   b) Next, order by category overall:\n        downtime > reliability > performance > bug > feature request > others\n   c) Finally, among tickets with the same plan/category, older tickets (earlier created_at) get priority.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nExample Walk-Through with Hypothetical Data\n\nSuppose we queried the last 10 open tickets and got the following results (simplified):\n\n Ticket ID | Plan      | Category      | Created At   | (Other details)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n 110       | advanced | downtime      | 2023-01-10   | ...\n 109       | advanced | reliability   | 2023-01-31   | ...\n 108       | advanced | performance   | 2023-02-12   | ...\n 107       | advanced | downtime      | 2023-02-15   | ...\n 106       | free     | reliability   | 2023-03-01   | ...\n 105       | standard | bug           | 2023-04-08   | ...\n 104       | advanced | feature req.  | 2023-05-22   | ...\n 103       | standard | downtime      | 2023-06-01   | ...\n 102       | advanced | reliability   | 2023-06-15   | ...\n 101       | standard | bug           | 2023-08-01   | ...\n\nStep A: Identify advanced-plan downtime/reliability tickets (they jump to the top):\n\u2022 110 (advanced, downtime)\n\u2022 107 (advanced, downtime)\n\u2022 109 (advanced, reliability)\n\u2022 102 (advanced, reliability)\n\nWithin those, downtime outranks reliability, and older tickets outrank newer:\n1) 110 (older, advanced downtime)\n2) 107 (newer, advanced downtime)\n3) 109 (older, advanced reliability)\n4) 102 (newer, advanced reliability)\n\nStep B: Remaining tickets, sorted by category order (downtime > reliability > performance > bug > feature > others) and then by older ticket first:\n\u2022 Downtime: 103\n\u2022 Reliability: 106\n\u2022 Performance: 108\n\u2022 Bug: 105, 101 (105 is older)\n\u2022 Feature: 104\nHence they get appended in the order: 103, 106, 108, 105, 101, 104\n\nFinal ordering of all 10 tickets:  \n1) 110  \n2) 107  \n3) 109  \n4) 102  \n5) 103  \n6) 106  \n7) 108  \n8) 105  \n9) 101  \n10) 104  \n\nWe only need the top 5 from that sorted list:\n\n<tickets>\n110\n107\n109\n102\n103\n</tickets>\n\nThose ticket IDs (110, 107, 109, 102, 103) are the highest-priority 5 according to your rules."
  }
]