Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 10 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is one way you could retrieve and prioritize the top 5 support tickets from among the most recent 10 open tickets, according to your specified rules. Because the classification, plan retrieval, and sorting have multiple steps (and cannot be done strictly in a single SQL query), the outline below shows how you might approach the task programmatically. The final output you would produce is illustrated at the end.

--------------------------------------------------------------------------------
1) Retrieve the 10 most recent open tickets

Use the support tickets database. For example:

SELECT 
  t.id,
  t.description,
  t.created_at
FROM support_ticket AS t
WHERE t.status = 'open'
ORDER BY t.created_at DESC
LIMIT 10;

This will give you the latest 10 open tickets by creation time.

--------------------------------------------------------------------------------
2) Extract the project ID from each ticket’s description

• Project IDs are UUIDs. A typical pattern is:
  [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
  
• For each ticket row fetched in Step 1, run a regex over description to find the UUID:
  For example, in many programming languages (pseudo-code):
  
  match = regex_find(description, /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/)
  projectId = match if found
  
If no project ID is found, you might consider that ticket as having no associated project (e.g., plan = unknown).

--------------------------------------------------------------------------------
3) Find the most recent plan for each project

Now, for each extracted projectId, query the control plane database to retrieve the most recent plan. A typical approach:

-- Find the latest plan for the project
SELECT 
  pc.plan_id
FROM project_plan_changelogs AS pc
WHERE pc.project_id = :extracted_project_id
ORDER BY pc.created_at DESC
LIMIT 1;

Then, map that plan_id to the actual plan name:

SELECT 
  p.name
FROM plans AS p
WHERE p.id = :plan_id;

Let’s call that name the “planName” for the ticket.

--------------------------------------------------------------------------------
4) Classify each ticket

Inspect each ticket’s subject or description to assign a single category from:
• downtime
• reliability
• performance
• bug
• feature request
• others

For example, you could search for particular keywords or patterns in the ticket description:

• "widespread service disruptions", "500 errors", "cannot access console" => downtime  
• "intermittent connectivity", "random request failures" => reliability  
• "performance issues", "high latency" => performance  
• "reporting a bug", "unexpected behavior", "incorrect results" => bug  
• "would love if Hasura could do X", "feature request" => feature request  
• otherwise => others  

--------------------------------------------------------------------------------
5) Sort the 10 tickets to find the top 5

Apply your sorting rules pairwise in this order:

1. If a ticket is on the ADVANCED plan with category = 'downtime' OR 'reliability', it is prioritized higher.
2. Otherwise, prioritize by category in this order:
   downtime > reliability > performance > bug > feature request > others.
3. For any tie, the older ticket (earlier created_at) is prioritized higher.

After sorting by these rules, take the first 5 tickets.

--------------------------------------------------------------------------------
6) Return the final sorted ticket IDs in the requested format

<tickets>
TICKET_ID_1
TICKET_ID_2
TICKET_ID_3
TICKET_ID_4
TICKET_ID_5
</tickets>

--------------------------------------------------------------------------------
Example (Hypothetical Data)

Assume after running your queries, you extract and classify these 10 open tickets (showing only partial details):

1) id = 801
   project_id = 1a651e3a-d824-4d53-a1fc-7c608a093ca9
   planName = 'advanced'
   created_at = 2023-09-15 12:05:00
   category = 'downtime'

2) id = 802
   project_id = 2b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'advanced'
   created_at = 2023-09-15 12:10:00
   category = 'reliability'

3) id = 803
   project_id = 3b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'standard'
   created_at = 2023-09-15 12:12:00
   category = 'reliability'

4) id = 804
   project_id = 4b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'team'
   created_at = 2023-09-17 09:00:00
   category = 'feature request'

5) id = 805
   project_id = 5b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'advanced'
   created_at = 2023-09-18 08:00:00
   category = 'bug'

6) id = 806
   project_id = 6b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'standard'
   created_at = 2023-09-18 08:10:00
   category = 'performance'

7) id = 807
   project_id = 7b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'standard'
   created_at = 2023-09-18 09:00:00
   category = 'performance'

8) id = 808
   project_id = 8b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'team'
   created_at = 2023-09-19 10:00:00
   category = 'bug'

9) id = 809
   project_id = 9b650e3a-d824-4d53-a1fc-7c608a093cb9
   planName = 'standard'
   created_at = 2023-09-20 08:00:00
   category = 'downtime'       -- Rare but possible

10) id = 810
    project_id = abc50e3a-d824-4d53-a1fc-7c608a093cb9
    planName = 'standard'
    created_at = 2023-09-21 11:00:00
    category = 'others'

Sorting under the rules:

1) Advanced plan & (downtime or reliability) come first:
   - #801 (advanced, downtime)  
   - #802 (advanced, reliability)

2) Next by category order (downtime > reliability > performance > bug > feature request > others):
   Among remaining tickets, #809 has downtime but plan standard. 
   Then #803 is reliability (standard), #806 and #807 are performance, #805 and #808 are bugs, #804 is feature request, #810 is others.

3) For ties in category, pick the older ticket first. (Illustrated below by comparing created_at.)

Hence, final priority might be:
1) Ticket #801 (advanced, downtime)
2) Ticket #802 (advanced, reliability)
3) Ticket #809 (standard, downtime)
4) Ticket #803 (standard, reliability)
5) Ticket #806 (standard, performance) 
   -- (806 is older than 807, so #806 over #807)

…and so on if we needed all 10. Top 5 would be #801, #802, #809, #803, #806.

Your final output:

<tickets>
801
802
809
803
806
</tickets>

--------------------------------------------------------------------------------
Summary

By combining the steps shown (fetch last 10 open tickets, parse project UUID, retrieve plan, classify the issue, then apply your custom priority rules), you can generate the top 5 tickets that should be addressed first, listing them in ascending order of their priority rank as requested.