Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is an illustrative example of how you might arrive at the top 5 tickets to prioritize, given the last 30 open tickets. Since no actual data is provided here, this example demonstrates a possible outcome based on typical parsing, plan lookups, classification, and the stated prioritization rules.

─────────────────────────────────────────────────────────────────
1) Retrieve the last 30 open tickets from the support tickets DB
─────────────────────────────────────────────────────────────────
Example (PostgreSQL):
SELECT
  st.id,
  st.subject,
  st.description,
  st.created_at
FROM support_ticket st
WHERE st.status = 'open'
ORDER BY st.created_at DESC
LIMIT 30;

─────────────────────────────────────────────────────────────────
2) For each ticket:
   (a) Extract project_id from the description (UUID regex)
   (b) Find the project’s most recent plan
   (c) Classify the ticket into one of: downtime, reliability, 
       performance, bug, feature request, others
─────────────────────────────────────────────────────────────────
Example for extracting the project ID from description (in application code or via a function):
  project_id = regex_extract(st.description, '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})')

Then, to find the most recent plan for that project:
  SELECT p.name AS plan_name
  FROM project_plan_changelogs ppc
  JOIN plans p ON p.id = ppc.plan_id
  WHERE ppc.project_id = :extracted_project_id
  ORDER BY ppc.created_at DESC
  LIMIT 1;

Classification example (simplified keyword matching):
• If description or subject indicates widespread service outage → "downtime"  
• If showing intermittent random failures → "reliability"  
• If referencing slow queries / triggers → "performance"  
• If describing incorrect API behavior or faulty console action → "bug"  
• If requesting additional feature → "feature request"  
• Otherwise → "others"

─────────────────────────────────────────────────────────────────
3) Apply the prioritization rules in pairwise comparisons:
   (i) If a ticket is in the “advanced” plan with category 
       “downtime” or “reliability,” prioritize it higher.
   (ii) Next prioritize by category order: 
       downtime > reliability > performance > bug > feature request > others
   (iii) If still tied, compare creation time (older = higher priority).
─────────────────────────────────────────────────────────────────

─────────────────────────────────────────────────────────────────
Example Final List (Hypothetical Tickets)
─────────────────────────────────────────────────────────────────

Below is an illustrative final example of five tickets in descending order of priority after applying the rules:

1) Ticket #101
   Plan: advanced
   Category: downtime
   Created_at: 2023-09-01 09:00:00
   (Highest priority: advanced + downtime)

2) Ticket #102
   Plan: advanced
   Category: reliability
   Created_at: 2023-09-01 09:10:00
   (Next highest: advanced + reliability)

3) Ticket #103
   Plan: pro
   Category: performance
   Created_at: 2023-09-02 10:00:00
   (Ties with other performance tickets, wins because it’s older)

4) Ticket #106
   Plan: advanced
   Category: performance
   Created_at: 2023-09-04 09:00:00
   (Same category as #103 but created later, so lower)

5) Ticket #104
   Plan: advanced
   Category: bug
   Created_at: 2023-09-03 09:00:00
   (Category bug < performance in the order, so it comes after all performance tickets)

The top 5 tickets would thus be:

<tickets>
101
102
103
106
104
</tickets>