[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is one way to produce the top 5 open tickets (based on the last 30 open tickets) that you should prioritize, following the requested steps. Because these tickets and project plans live in different databases, you will need to:\n\n1) Query the support tickets database to fetch the last 30 open tickets.  \n2) Extract the project ID (UUID) from the description.  \n3) Classify each ticket based on its description.  \n4) Look up its most recent plan in the control plane database.  \n5) Sort them according to the priority rules.  \n6) Finally, return the top 5 ticket IDs inside <tickets></tickets>.  \n\nBelow is an illustrative solution showing how you might do this in multiple steps. (In practice, you\u2019d likely do this in application code by running the queries in sequence, or via a script.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 1) Get the last 30 open tickets from the support tickets database.\n--    We also extract the project_id using a UUID pattern in the description.\n\nWITH last_30 AS (\n  SELECT\n    t.id,\n    t.description,\n    t.created_at,\n    substring(\n      t.description\n      FROM '([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})'\n    ) AS extracted_project_id\n  FROM support_ticket AS t\n  WHERE t.status = 'open'\n  ORDER BY t.created_at DESC\n  LIMIT 30\n)\n\n-- 2) Classify tickets by \u201cdowntime\u201d, \u201creliability\u201d, \u201cperformance\u201d, \u201cbug\u201d, \n--    \u201cfeature request\u201d, or \u201cothers\u201d. Below is a simple example of how you\n--    might categorize by searching for certain keywords. (Adjust as needed.)\n\n, classified AS (\n  SELECT\n    l.id,\n    l.created_at,\n    l.extracted_project_id,\n    CASE\n      WHEN l.description ILIKE '%downtime%' \n        OR l.description ILIKE '%outage%' \n        OR l.description ILIKE '%widespread%' \n        OR l.description ILIKE '%500 error%'\n      THEN 'downtime'\n      WHEN l.description ILIKE '%intermittent%' \n        OR l.description ILIKE '%random failure%'\n        OR l.description ILIKE '%unreliable%'\n      THEN 'reliability'\n      WHEN l.description ILIKE '%performance%'\n        OR l.description ILIKE '%latency%'\n        OR l.description ILIKE '%slow%'\n      THEN 'performance'\n      WHEN l.description ILIKE '%bug%'\n        OR l.description ILIKE '%issue%'\n      THEN 'bug'\n      WHEN l.description ILIKE '%feature request%'\n        OR l.description ILIKE '%enhancement%'\n      THEN 'feature request'\n      ELSE 'others'\n    END AS category\n  FROM last_30 AS l\n)\n\n-- 3) Join with the control plane database (projects, project_plan_changelogs, plans)\n--    to get the most recent plan. Because this is cross-database, you\u2019d do it\n--    in a separate step or via a data-pipeline approach. Illustratively:\n\nSELECT\n  c.id            AS ticket_id,\n  c.created_at    AS ticket_created_at,\n  c.extracted_project_id,\n  c.category,\n  p.name          AS plan_name\nFROM classified c\nLEFT JOIN LATERAL (\n  SELECT pl.name\n  FROM control_plane_db_schema.project_plan_changelogs pc\n  JOIN control_plane_db_schema.plans pl\n    ON pl.id = pc.plan_id\n  WHERE \n    c.extracted_project_id IS NOT NULL \n    AND pc.project_id = c.extracted_project_id::uuid\n  ORDER BY pc.created_at DESC\n  LIMIT 1\n) p ON true\nORDER BY\n  -- 4) Sorting logic:\n  --    (a) Tickets on \u201cAdvanced\u201d plan with category in ('downtime', 'reliability') first\n  CASE \n    WHEN p.name = 'Advanced' AND c.category IN ('downtime','reliability') \n    THEN 1 \n    ELSE 2 \n  END,\n  --    (b) Next by category priority: downtime > reliability > performance > bug > feature request > others\n  CASE c.category\n    WHEN 'downtime'       THEN 1\n    WHEN 'reliability'    THEN 2\n    WHEN 'performance'    THEN 3\n    WHEN 'bug'            THEN 4\n    WHEN 'feature request' THEN 5\n    ELSE 6\n  END,\n  --    (c) Finally by older tickets first\n  c.created_at ASC\nLIMIT 5;\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nAfter running the above logic (in your application code or script), you will have the 5 highest-priority ticket IDs. Suppose the final sorted IDs (in priority order) are:\n\n\u2022 101  \n\u2022 77  \n\u2022 145  \n\u2022 208  \n\u2022 13  \n\nYou would then return them in the requested format:\n\n<tickets>\n101\n77\n145\n208\n13\n</tickets>\n\nAdjust the exact classification conditions, string matches, and \u201cAdvanced\u201d plan name checks based on how your data actually indicates advanced vs. other plan tiers. Also make sure to fine-tune the substring() or REGEXP patterns for the project UUID extraction if your descriptions follow a different format."
  }
]