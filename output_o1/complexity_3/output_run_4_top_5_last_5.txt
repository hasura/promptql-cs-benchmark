Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is one possible method to arrive at the top 5 open tickets with the requested details and priority ordering.

────────────────────────────────────────────────────────────────────
1) Fetch the last 5 open tickets
────────────────────────────────────────────────────────────────────
-- Support Tickets DB
SELECT
  id,
  description,
  created_at
FROM support_ticket
WHERE status = 'open'
ORDER BY created_at DESC
LIMIT 5;

This gives you the 5 most recently created open tickets (by descending creation time). Let’s call these tickets T1, T2, T3, T4, and T5.

────────────────────────────────────────────────────────────────────
2) Extract project_id from each ticket’s description
────────────────────────────────────────────────────────────────────
Use a regular expression to find the UUID in the “description” field. 
Below is an example approach to use on each ticket (you can adjust if your text structure differs). For ticket with id = :ticket_id:

-- Support Tickets DB
SELECT
  (regexp_matches(description, '([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})'))[1] AS project_id
FROM support_ticket
WHERE id = :ticket_id;

For each ticket T1..T5, store the parsed UUID (if found). If none is found, you may treat the project_id as NULL or empty.

────────────────────────────────────────────────────────────────────
3) Fetch the most recently assigned plan for each project
────────────────────────────────────────────────────────────────────
Having the extracted project_id for a ticket, you can query the control plane to get the most recent plan:

-- Control Plane DB
SELECT p.name AS plan_name
FROM project_plan_changelogs c
JOIN plans p ON c.plan_id = p.id
WHERE c.project_id = :project_id
ORDER BY c.created_at DESC
LIMIT 1;

If there is no matching entry, you can treat the plan as NULL (or unknown).

────────────────────────────────────────────────────────────────────
4) Classify each ticket into categories
────────────────────────────────────────────────────────────────────
Looking at each ticket’s “description” (and possibly “subject”), assign one of the following:  
• “downtime”  
• “reliability”  
• “performance”  
• “bug”  
• “feature request”  
• “others”  

Guidelines (simplified):  
  downtime → Widespread service disruptions, inability to access project consoles and GraphQL endpoints  
  reliability → Intermittent or random failures, periodic outages  
  performance → Slow response times, increased latency  
  bug → Specific malfunction or erroneous behavior  
  feature request → Users want new or additional functionality  
  others → Does not fit the categories above  

────────────────────────────────────────────────────────────────────
5) Apply the sort rules for prioritization
────────────────────────────────────────────────────────────────────
From the original request, the sorting rules are:

(1) Any ticket on the Advanced plan whose category is “downtime” or “reliability” should float to the top (i.e., is highest priority).  
(2) Among remaining tickets, sort by category in this order:  
    downtime > reliability > performance > bug > feature request > others  
(3) When there is still a tie (e.g., same category or same conditions), prefer older tickets first (earlier created_at).  

Put all tickets in a single sorted list using the above rules.

────────────────────────────────────────────────────────────────────
6) Example final listing
────────────────────────────────────────────────────────────────────
Suppose the final top 5 tickets (by ID) after classification and sorted according to the rules is:

102 (Advanced plan, downtime)  
101 (Advanced plan, reliability)  
104 (Advanced plan, performance)  
105 (Advanced plan, bug)  
103 (Free plan, feature request)

Then you return them in the requested format:

<tickets>
102
101
104
105
103
</tickets>

Adjust as appropriate based on your real ticket data.