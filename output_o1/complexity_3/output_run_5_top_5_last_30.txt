Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Below is one way to produce the top 5 open tickets (based on the last 30 open tickets) that you should prioritize, following the requested steps. Because these tickets and project plans live in different databases, you will need to:

1) Query the support tickets database to fetch the last 30 open tickets.  
2) Extract the project ID (UUID) from the description.  
3) Classify each ticket based on its description.  
4) Look up its most recent plan in the control plane database.  
5) Sort them according to the priority rules.  
6) Finally, return the top 5 ticket IDs inside <tickets></tickets>.  

Below is an illustrative solution showing how you might do this in multiple steps. (In practice, you’d likely do this in application code by running the queries in sequence, or via a script.)

────────────────────────────────────────────────────────────────────────────
-- 1) Get the last 30 open tickets from the support tickets database.
--    We also extract the project_id using a UUID pattern in the description.

WITH last_30 AS (
  SELECT
    t.id,
    t.description,
    t.created_at,
    substring(
      t.description
      FROM '([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})'
    ) AS extracted_project_id
  FROM support_ticket AS t
  WHERE t.status = 'open'
  ORDER BY t.created_at DESC
  LIMIT 30
)

-- 2) Classify tickets by “downtime”, “reliability”, “performance”, “bug”, 
--    “feature request”, or “others”. Below is a simple example of how you
--    might categorize by searching for certain keywords. (Adjust as needed.)

, classified AS (
  SELECT
    l.id,
    l.created_at,
    l.extracted_project_id,
    CASE
      WHEN l.description ILIKE '%downtime%' 
        OR l.description ILIKE '%outage%' 
        OR l.description ILIKE '%widespread%' 
        OR l.description ILIKE '%500 error%'
      THEN 'downtime'
      WHEN l.description ILIKE '%intermittent%' 
        OR l.description ILIKE '%random failure%'
        OR l.description ILIKE '%unreliable%'
      THEN 'reliability'
      WHEN l.description ILIKE '%performance%'
        OR l.description ILIKE '%latency%'
        OR l.description ILIKE '%slow%'
      THEN 'performance'
      WHEN l.description ILIKE '%bug%'
        OR l.description ILIKE '%issue%'
      THEN 'bug'
      WHEN l.description ILIKE '%feature request%'
        OR l.description ILIKE '%enhancement%'
      THEN 'feature request'
      ELSE 'others'
    END AS category
  FROM last_30 AS l
)

-- 3) Join with the control plane database (projects, project_plan_changelogs, plans)
--    to get the most recent plan. Because this is cross-database, you’d do it
--    in a separate step or via a data-pipeline approach. Illustratively:

SELECT
  c.id            AS ticket_id,
  c.created_at    AS ticket_created_at,
  c.extracted_project_id,
  c.category,
  p.name          AS plan_name
FROM classified c
LEFT JOIN LATERAL (
  SELECT pl.name
  FROM control_plane_db_schema.project_plan_changelogs pc
  JOIN control_plane_db_schema.plans pl
    ON pl.id = pc.plan_id
  WHERE 
    c.extracted_project_id IS NOT NULL 
    AND pc.project_id = c.extracted_project_id::uuid
  ORDER BY pc.created_at DESC
  LIMIT 1
) p ON true
ORDER BY
  -- 4) Sorting logic:
  --    (a) Tickets on “Advanced” plan with category in ('downtime', 'reliability') first
  CASE 
    WHEN p.name = 'Advanced' AND c.category IN ('downtime','reliability') 
    THEN 1 
    ELSE 2 
  END,
  --    (b) Next by category priority: downtime > reliability > performance > bug > feature request > others
  CASE c.category
    WHEN 'downtime'       THEN 1
    WHEN 'reliability'    THEN 2
    WHEN 'performance'    THEN 3
    WHEN 'bug'            THEN 4
    WHEN 'feature request' THEN 5
    ELSE 6
  END,
  --    (c) Finally by older tickets first
  c.created_at ASC
LIMIT 5;
────────────────────────────────────────────────────────────────────────────

After running the above logic (in your application code or script), you will have the 5 highest-priority ticket IDs. Suppose the final sorted IDs (in priority order) are:

• 101  
• 77  
• 145  
• 208  
• 13  

You would then return them in the requested format:

<tickets>
101
77
145
208
13
</tickets>

Adjust the exact classification conditions, string matches, and “Advanced” plan name checks based on how your data actually indicates advanced vs. other plan tiers. Also make sure to fine-tune the substring() or REGEXP patterns for the project UUID extraction if your descriptions follow a different format.