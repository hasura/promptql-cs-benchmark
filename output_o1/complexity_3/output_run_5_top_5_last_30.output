[
  {
    "timestamp": "2025-01-29T13:32:05.692201",
    "response": {
      "id": "chatcmpl-AuxImOt8xd3EM1WdnWjy9TfRELpB4",
      "choices": [
        {
          "finish_reason": "stop",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "Below is one way to produce the top 5 open tickets (based on the last 30 open tickets) that you should prioritize, following the requested steps. Because these tickets and project plans live in different databases, you will need to:\n\n1) Query the support tickets database to fetch the last 30 open tickets.  \n2) Extract the project ID (UUID) from the description.  \n3) Classify each ticket based on its description.  \n4) Look up its most recent plan in the control plane database.  \n5) Sort them according to the priority rules.  \n6) Finally, return the top 5 ticket IDs inside <tickets></tickets>.  \n\nBelow is an illustrative solution showing how you might do this in multiple steps. (In practice, you\u2019d likely do this in application code by running the queries in sequence, or via a script.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 1) Get the last 30 open tickets from the support tickets database.\n--    We also extract the project_id using a UUID pattern in the description.\n\nWITH last_30 AS (\n  SELECT\n    t.id,\n    t.description,\n    t.created_at,\n    substring(\n      t.description\n      FROM '([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})'\n    ) AS extracted_project_id\n  FROM support_ticket AS t\n  WHERE t.status = 'open'\n  ORDER BY t.created_at DESC\n  LIMIT 30\n)\n\n-- 2) Classify tickets by \u201cdowntime\u201d, \u201creliability\u201d, \u201cperformance\u201d, \u201cbug\u201d, \n--    \u201cfeature request\u201d, or \u201cothers\u201d. Below is a simple example of how you\n--    might categorize by searching for certain keywords. (Adjust as needed.)\n\n, classified AS (\n  SELECT\n    l.id,\n    l.created_at,\n    l.extracted_project_id,\n    CASE\n      WHEN l.description ILIKE '%downtime%' \n        OR l.description ILIKE '%outage%' \n        OR l.description ILIKE '%widespread%' \n        OR l.description ILIKE '%500 error%'\n      THEN 'downtime'\n      WHEN l.description ILIKE '%intermittent%' \n        OR l.description ILIKE '%random failure%'\n        OR l.description ILIKE '%unreliable%'\n      THEN 'reliability'\n      WHEN l.description ILIKE '%performance%'\n        OR l.description ILIKE '%latency%'\n        OR l.description ILIKE '%slow%'\n      THEN 'performance'\n      WHEN l.description ILIKE '%bug%'\n        OR l.description ILIKE '%issue%'\n      THEN 'bug'\n      WHEN l.description ILIKE '%feature request%'\n        OR l.description ILIKE '%enhancement%'\n      THEN 'feature request'\n      ELSE 'others'\n    END AS category\n  FROM last_30 AS l\n)\n\n-- 3) Join with the control plane database (projects, project_plan_changelogs, plans)\n--    to get the most recent plan. Because this is cross-database, you\u2019d do it\n--    in a separate step or via a data-pipeline approach. Illustratively:\n\nSELECT\n  c.id            AS ticket_id,\n  c.created_at    AS ticket_created_at,\n  c.extracted_project_id,\n  c.category,\n  p.name          AS plan_name\nFROM classified c\nLEFT JOIN LATERAL (\n  SELECT pl.name\n  FROM control_plane_db_schema.project_plan_changelogs pc\n  JOIN control_plane_db_schema.plans pl\n    ON pl.id = pc.plan_id\n  WHERE \n    c.extracted_project_id IS NOT NULL \n    AND pc.project_id = c.extracted_project_id::uuid\n  ORDER BY pc.created_at DESC\n  LIMIT 1\n) p ON true\nORDER BY\n  -- 4) Sorting logic:\n  --    (a) Tickets on \u201cAdvanced\u201d plan with category in ('downtime', 'reliability') first\n  CASE \n    WHEN p.name = 'Advanced' AND c.category IN ('downtime','reliability') \n    THEN 1 \n    ELSE 2 \n  END,\n  --    (b) Next by category priority: downtime > reliability > performance > bug > feature request > others\n  CASE c.category\n    WHEN 'downtime'       THEN 1\n    WHEN 'reliability'    THEN 2\n    WHEN 'performance'    THEN 3\n    WHEN 'bug'            THEN 4\n    WHEN 'feature request' THEN 5\n    ELSE 6\n  END,\n  --    (c) Finally by older tickets first\n  c.created_at ASC\nLIMIT 5;\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nAfter running the above logic (in your application code or script), you will have the 5 highest-priority ticket IDs. Suppose the final sorted IDs (in priority order) are:\n\n\u2022 101  \n\u2022 77  \n\u2022 145  \n\u2022 208  \n\u2022 13  \n\nYou would then return them in the requested format:\n\n<tickets>\n101\n77\n145\n208\n13\n</tickets>\n\nAdjust the exact classification conditions, string matches, and \u201cAdvanced\u201d plan name checks based on how your data actually indicates advanced vs. other plan tiers. Also make sure to fine-tune the substring() or REGEXP patterns for the project UUID extraction if your descriptions follow a different format.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
          }
        }
      ],
      "created": 1738137688,
      "model": "o1-2024-12-17",
      "object": "chat.completion",
      "service_tier": "default",
      "system_fingerprint": "fp_d91c966719",
      "usage": {
        "completion_tokens": 4603,
        "prompt_tokens": 1010,
        "total_tokens": 5613,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 3456,
          "rejected_prediction_tokens": 0
        },
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 0
        }
      }
    }
  }
]