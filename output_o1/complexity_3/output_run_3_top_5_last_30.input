[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 30 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an outline of how to retrieve the last 30 \u201copen\u201d tickets, extract the project ID from each ticket description, determine the project\u2019s latest plan, classify each ticket, then sort and return the top 5 ticket IDs according to the specified priority rules. Because the underlying data may vary, the example final output below is illustrative.\n\n--------------------------------------------------------------------------------\n1) Fetch the last 30 open tickets from the support tickets database\n--------------------------------------------------------------------------------\nUse a query similar to:\n\nSELECT\n  id,\n  description,\n  created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 30;\n\n--------------------------------------------------------------------------------\n2) Extract the project ID from each ticket description\n--------------------------------------------------------------------------------\nProject IDs are UUIDs, so you can look for any substring that matches the UUID pattern:\n\n[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\n\nIn pseudocode:\n\nfor each ticket in results:\n  match = regex(description, pattern=\"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\")\n  project_id = match if found else null\n\n--------------------------------------------------------------------------------\n3) Look up that project\u2019s latest plan in the control plane\n--------------------------------------------------------------------------------\nWith the extracted project_id, you can look up the latest plan via the project_plan_changelogs and plans tables:\n\nSELECT pl.name AS plan_name\nFROM project_plan_changelogs pc\nJOIN plans pl ON pc.plan_id = pl.id\nWHERE pc.project_id = '<EXTRACTED_PROJECT_ID>'\nORDER BY pc.created_at DESC\nLIMIT 1;\n\n--------------------------------------------------------------------------------\n4) Classify each ticket into one of the categories\n--------------------------------------------------------------------------------\nUsing the ticket\u2019s description (or subject), look for relevant keywords/phrases to decide among:\n\u2022 downtime\n\u2022 reliability\n\u2022 performance\n\u2022 bug\n\u2022 feature request\n\u2022 others\n\nClassification examples:\n\u2022 Contains \u201cwidespread service disruption,\u201d \u201ccannot access console,\u201d \u201c500 errors\u201d \u2192 downtime\n\u2022 Mentions \u201coccasional request failures,\u201d \u201crandom timeouts\u201d \u2192 reliability\n\u2022 Mentions \u201cvery slow response times,\u201d \u201chigh latency,\u201d \u201cperformance issue\u201d \u2192 performance\n\u2022 Mentions \u201cunexpected or incorrect functionality,\u201d \u201creturned wrong results\u201d \u2192 bug\n\u2022 Mentions \u201cwould like a new feature,\u201d \u201cenhancement request,\u201d \u201cfeature request\u201d \u2192 feature request\n\u2022 Everything else \u2192 others\n\n--------------------------------------------------------------------------------\n5) Sort the 30 tickets and pick the top 5 using the custom priority rules\n--------------------------------------------------------------------------------\nPriority rules, in order:\n  a) If a ticket is on the \"advanced\" plan and has category = 'downtime' or 'reliability', it outranks all others.\n  b) Then sort by ticket category, using this order (highest to lowest):\n     1. downtime\n     2. reliability\n     3. performance\n     4. bug\n     5. feature request\n     6. others\n  c) If there\u2019s still a tie, pick the older ticket first (compare created_at ascending).\n\n--------------------------------------------------------------------------------\n6) Return the top 5 ticket IDs\n--------------------------------------------------------------------------------\nAfter applying the above rules, take the first 5 tickets from your sorted list and return them as follows:\n\n<tickets>\nTICKET_ID_1\nTICKET_ID_2\nTICKET_ID_3\nTICKET_ID_4\nTICKET_ID_5\n</tickets>\n\n--------------------------------------------------------------------------------\nExample of final output (assuming the IDs below ended up on top after sorting)\n--------------------------------------------------------------------------------\n\n<tickets>\n1012\n1007\n994\n1001\n987\n</tickets>\n\n--------------------------------------------------------------------------------\nComplete Summary\n--------------------------------------------------------------------------------\n1. SELECT last 30 open tickets (ordered by newest first).\n2. For each, parse description to extract the UUID project_id (if present).\n3. Query the control plane to get the project\u2019s most recent plan.\n4. Classify the ticket by content.\n5. Sort using the custom rules (advanced downtime/reliability first, then category, then older is higher priority).\n6. Return the top 5 in the requested <tickets>\u2026</tickets> format."
  }
]