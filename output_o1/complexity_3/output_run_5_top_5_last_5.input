[
  {
    "role": "system",
    "content": "You are an assistant with access to two databases with the following schemas:\n\n1. Control Plane Database Schema:\ntable data_generation_seeds columns ( project_id uuid, initial_request_pattern_type text, price_per_model_advanced integer, support_request_pattern_type text, ticket_frequency text,)\ntable error_rate_daily columns ( project_id uuid, date date, success_count integer, error_count integer, error_rate double precision,)\ntable invoice columns ( stripe_invoice_id text, customer_id text, subscription_id text, month integer, year integer, description text, status text, invoice_url text, attempt_count integer, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable invoice_item columns ( id uuid, invoice_id text, amount numeric, description text, project_id uuid, type text, month integer, year integer, has_updated_to_stripe boolean, error text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable plans columns ( id uuid, name text, created_at timestamp with time zone, updated_at timestamp with time zone,)\ntable project_plan_changelogs columns ( id uuid, plan_id uuid, project_id uuid, comment text, created_at timestamp with time zone,)\ntable projects columns ( id uuid, name text, owner_id uuid, created_at timestamp with time zone, updated_at timestamp with time zone, deleted_at timestamp with time zone, active_models integer,)\ntable requests_daily_count columns ( project_id uuid, date date, request_count integer,)\ntable users columns ( id uuid, email text, customer_id text, created_at timestamp with time zone, updated_at timestamp with time zone, first_name text, last_name text,)\n\n2. Support Tickets Database Schema:\ntable support_ticket columns ( id integer, is_public boolean, priority text, status text, subject text, description text, type text, assignee_id integer, requester_id integer, created_at timestamp with time zone, url text,)\ntable support_ticket_comment columns ( id integer, ticket_id integer, body text, created_at timestamp with time zone, user_id integer,)\ntable support_user columns ( id integer, email text, role text,)\n\nAdditional Instructions:\n\n- Always write queries that are compatible with PostgreSQL\n"
  },
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": "Below is an example workflow to achieve your requested result. Because we do not have your actual production data, this workflow demonstrates one possible approach using illustrative ticket data. In practice, you would run these queries on your actual databases and then apply the classification and priority rules.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1) Get the last 5 open tickets\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse a query against the support ticket DB (support_tickets):\n\nSELECT \n  id,\n  subject,\n  description,\n  created_at\nFROM support_ticket\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 5;\n\nAssume this returns five rows; for example (fabricated data):\n\n id  |             subject              |                                     description                                     |        created_at\n-----|----------------------------------|-------------------------------------------------------------------------------------|----------------------------\n 321 | Production downtime urgent       | \"We are facing major issues with our project c7d3ece1-2f77-40a7-8c48-38cbf149e202\u2026\" | 2023-08-01 08:15:00+00\n 322 | Random request failures          | \"We have advanced plan for project c2a3e7d1-23ad-44b7-974d-d5088a69cd21\u2026\"           | 2023-08-02 10:00:00+00\n 323 | Performance degrade              | \"Project d3e2eee1-2abc-46da-889d-efdabeeabc09 is having high latency\u2026\"             | 2023-08-03 14:20:00+00\n 324 | Schema registry bug              | \"Project bfcc59fb-ad2d-423b-a536-9c9c13d75017 allows unauthorized updates\u2026\"         | 2023-08-04 09:45:00+00\n 325 | Add feature request for actions  | \"We need advanced batch ops for project a4b2ece1-2f77-40a7-8c48-38cbf149e2cd\u2026\"       | 2023-08-05 11:30:00+00\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2) Extract the project ID from ticket descriptions\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFor each ticket\u2019s description, apply a UUID-detection regex such as:\n\nSELECT\n  id,\n  (regexp_matches(description, '([0-9a-fA-F-]{36})'))[1] AS project_id\nFROM support_ticket\nWHERE id IN (\u2026);\n\nFrom the example rows, we get:\n\u2022 Ticket 321 \u2192 project_id = c7d3ece1-2f77-40a7-8c48-38cbf149e202  \n\u2022 Ticket 322 \u2192 project_id = c2a3e7d1-23ad-44b7-974d-d5088a69cd21  \n\u2022 Ticket 323 \u2192 project_id = d3e2eee1-2abc-46da-889d-efdabeeabc09  \n\u2022 Ticket 324 \u2192 project_id = bfcc59fb-ad2d-423b-a536-9c9c13d75017  \n\u2022 Ticket 325 \u2192 project_id = a4b2ece1-2f77-40a7-8c48-38cbf149e2cd  \n\n(Note: If a description contains more than one UUID, you may want additional logic to determine which is accurate for the project.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3) Get the most recent plan for each project\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUse the control_plane database. For each project_id, look up the most recent entry in project_plan_changelogs and then join to plans:\n\n-- Example of retrieving the most recent plan_id per project:\nWITH latest_plan_change AS (\n  SELECT\n    project_id,\n    plan_id,\n    ROW_NUMBER() OVER (PARTITION BY project_id ORDER BY created_at DESC) AS rn\n  FROM project_plan_changelogs\n)\nSELECT \n  l.project_id,\n  p.name AS plan_name\nFROM latest_plan_change l\nJOIN plans p ON p.id = l.plan_id\nWHERE l.rn = 1\n  AND l.project_id IN (\n    'c7d3ece1-2f77-40a7-8c48-38cbf149e202',\n    'c2a3e7d1-23ad-44b7-974d-d5088a69cd21',\n    'd3e2eee1-2abc-46da-889d-efdabeeabc09',\n    'bfcc59fb-ad2d-423b-a536-9c9c13d75017',\n    'a4b2ece1-2f77-40a7-8c48-38cbf149e2cd'\n  );\n\nAssume we get (hypothetical):\n\u2022 c7d3ece1-2f77-40a7-8c48-38cbf149e202 \u2192 \"advanced\"  \n\u2022 c2a3e7d1-23ad-44b7-974d-d5088a69cd21 \u2192 \"advanced\"  \n\u2022 d3e2eee1-2abc-46da-889d-efdabeeabc09 \u2192 \"standard\"  \n\u2022 bfcc59fb-ad2d-423b-a536-9c9c13d75017 \u2192 \"advanced\"  \n\u2022 a4b2ece1-2f77-40a7-8c48-38cbf149e2cd \u2192 \"pro\"  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n4) Classify each ticket\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nReview the content and apply your classification rules:\n\n1. Ticket 321, subject: \"Production downtime urgent\", \n   description suggests \u201ceverything is down\u201d, \n   \u2192 Category: downtime.\n\n2. Ticket 322, mentions \u201crandom request failures\u201d in a production environment, \n   \u2192 Category: reliability.\n\n3. Ticket 323, mentions \u201chigh latency\u201d / \u201cperformance degrade\u201d, \n   \u2192 Category: performance.\n\n4. Ticket 324, mentions \u201cschema registry bug\u2026 unauthorized updates\u201d, \n   \u2192 Category: bug.\n\n5. Ticket 325, a \u201cfeature request\u2026 advanced batch ops\u201d, \n   \u2192 Category: feature request.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n5) Sort by priority rules\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nRules, in order:\n  a) Among advanced-plan tickets, if category is downtime or reliability, that ranks higher.  \n  b) Then compare categories in the order: downtime > reliability > performance > bug > feature request > others.  \n  c) If still tied, prioritize by older creation time.\n\nBased on plan_name and categories:\n\n\u2022 Ticket 321 \u2192 plan: advanced, category: downtime\n\u2022 Ticket 322 \u2192 plan: advanced, category: reliability\n\u2022 Ticket 323 \u2192 plan: standard, category: performance\n\u2022 Ticket 324 \u2192 plan: advanced, category: bug\n\u2022 Ticket 325 \u2192 plan: pro, category: feature request\n\nApply the rules:\n\n1) Both Ticket 321 (advanced + downtime) and Ticket 322 (advanced + reliability) satisfy \u201cadvanced plan + (downtime/reliability)\u201d. They rank highest. Compare them: downtime ranks higher than reliability \u2192 321 outranks 322.  \n2) Among the remaining tickets:  \n     \u2022 323 (performance), 324 (bug), 325 (feature request).  \n   By category order: performance > bug > feature request \u2192 323 outranks 324 outranks 325.  \n\nFinal sorted order of ticket IDs (highest priority first):  \n   321, 322, 323, 324, 325.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n6) Return the final list\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThe final list of 5 tickets in priority order:\n\n<tickets>\n321\n322\n323\n324\n325\n</tickets>"
  }
]