[
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the base plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- If a ticket is on the free plan with category 'downtime', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text=\"I'll help create a comprehensive analysis and sorting of the support tickets. This will require multiple steps:\\n\\n1. First, let's get the last 5 open tickets with their details\\n2. Extract project IDs and get their plan information\\n3. Classify the tickets\\n4. Sort them according to the given rules\\n\\nLet's start by getting the ticket information:\", type='text')",
      "ToolUseBlock(id='toolu_01KbPS3RevuYmn6DczMKrDzV', input={'sql': \"SELECT \\n    t.id,\\n    t.subject,\\n    t.description,\\n    t.created_at,\\n    t.priority\\nFROM support_ticket t\\nWHERE t.status = 'open'\\nORDER BY t.created_at DESC\\nLIMIT 5;\"}, name='query_support_tickets', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_01KbPS3RevuYmn6DczMKrDzV",
        "content": "[{\"id\": 143, \"subject\": \"URGENT: Cannot Access Project\", \"description\": \"I am unable to access my project on Hasura Cloud. When I try to open the project dashboard, it fails to load and shows an error message. This is critically impacting our production environment and needs immediate attention.\\n\\nProject ID: abc123\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.41.0\\n\\nPlease assist as soon as possible.\\n\\nThank you.\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\", \"created_at\": \"2025-01-03T20:32:35.345840+00:00\", \"priority\": null}, {\"id\": 166, \"subject\": \"Feature Request: Support for Custom GraphQL Directives\", \"description\": \"Hello,\\n\\nWe are using your platform with a PostgreSQL database and would like to request support for custom GraphQL directives in queries and mutations. This feature would greatly help us implement advanced query logic and improve our application's flexibility.\\n\\nIs this something that could be supported in future releases?\\n\\nThank you for your assistance.\\n\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\", \"created_at\": \"2024-12-21T14:32:35.345840+00:00\", \"priority\": null}, {\"id\": 209, \"subject\": \"Urgent: Production Environment Down - Immediate Assistance Required\", \"description\": \"Hello,\\n\\nWe are experiencing a complete outage of our production environment. All our services are down, and users are unable to access the application, leading to a major disruption in our operations.\\n\\nOur application uses PostgreSQL as the database, and we are currently running version v2.48.5. We have not made any recent changes or deployments that could have caused this issue.\\n\\nWe urgently need assistance to resolve this problem.\\n\\nThank you,\\n[Your Name]\\n\\nProject ID: 76de9616-3d7b-49d7-b909-e154dda91489\\n\", \"created_at\": \"2024-12-05T07:00:00+00:00\", \"priority\": null}, {\"id\": 169, \"subject\": \"Schema Registry causing high resource usage and slow responses in production\", \"description\": \"Hi,\\n\\nWe are experiencing resource exhaustion issues while using the Schema Registry feature in our production environment. The Schema Registry seems to consume a lot of CPU and memory resources, leading to slow responses from our application.\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.46.0\\n\\nCould you please help us resolve this issue?\\n\\nThanks.\\n\\nProject ID: 386d8856-9020-47eb-a21a-2ebe6b81428e\\n\", \"created_at\": \"2024-11-12T05:00:00+00:00\", \"priority\": null}, {\"id\": 251, \"subject\": \"Performance degradation in permission-related operations\", \"description\": \"Hi Support,\\n\\nWe are experiencing significant performance degradation when performing operations that involve permissions in our Hasura setup. Queries that used to execute in milliseconds are now taking several seconds to complete, especially those with complex permission rules.\\n\\nWe are using PostgreSQL as our database. Current Hasura version: v2.44.0.\\n\\nCould you please help us troubleshoot this issue and suggest any optimizations?\\n\\nThanks.\\n\\nProject ID: d5dc02fc-707a-4084-854a-79f5866d4dd3\\n\", \"created_at\": \"2024-10-25T04:00:00+00:00\", \"priority\": null}]"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text=\"Now, let's get the plan information for these projects:\", type='text')",
      "ToolUseBlock(id='toolu_017N69VB82ZzJbwCNG2pvDd4', input={'sql': \"WITH latest_plan_changes AS (\\n    SELECT \\n        pc.project_id,\\n        p.name as plan_name,\\n        pc.created_at,\\n        ROW_NUMBER() OVER (PARTITION BY pc.project_id ORDER BY pc.created_at DESC) as rn\\n    FROM project_plan_changelogs pc\\n    JOIN plans p ON p.id = pc.plan_id\\n    WHERE pc.project_id IN (\\n        '2a8d4b07-c391-450f-8153-f6521f8a20a0',\\n        '76de9616-3d7b-49d7-b909-e154dda91489',\\n        '386d8856-9020-47eb-a21a-2ebe6b81428e',\\n        'd5dc02fc-707a-4084-854a-79f5866d4dd3'\\n    )\\n)\\nSELECT project_id, plan_name\\nFROM latest_plan_changes\\nWHERE rn = 1;\"}, name='query_control_plane_data', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_017N69VB82ZzJbwCNG2pvDd4",
        "content": "[{\"project_id\": \"2a8d4b07-c391-450f-8153-f6521f8a20a0\", \"plan_name\": \"base\"}, {\"project_id\": \"386d8856-9020-47eb-a21a-2ebe6b81428e\", \"plan_name\": \"advanced\"}, {\"project_id\": \"76de9616-3d7b-49d7-b909-e154dda91489\", \"plan_name\": \"free\"}, {\"project_id\": \"d5dc02fc-707a-4084-854a-79f5866d4dd3\", \"plan_name\": \"base\"}]"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text=\"Now, let's use Python to classify and sort the tickets according to the given rules:\", type='text')",
      "ToolUseBlock(id='toolu_015hkSNSrKs83qGKSULVTiSC', input={'pythonCode': 'import json\\nfrom datetime import datetime\\nfrom functools import cmp_to_key\\n\\n# Ticket data\\ntickets = [\\n    {\\n        \"id\": 143,\\n        \"project_id\": \"2a8d4b07-c391-450f-8153-f6521f8a20a0\",\\n        \"subject\": \"URGENT: Cannot Access Project\",\\n        \"description\": \"I am unable to access my project on Hasura Cloud...\",\\n        \"created_at\": \"2025-01-03T20:32:35.345840+00:00\",\\n        \"category\": \"downtime\"  # Cannot access project dashboard indicates downtime\\n    },\\n    {\\n        \"id\": 166,\\n        \"project_id\": \"2a8d4b07-c391-450f-8153-f6521f8a20a0\",\\n        \"subject\": \"Feature Request: Support for Custom GraphQL Directives\",\\n        \"description\": \"Request for custom GraphQL directives...\",\\n        \"created_at\": \"2024-12-21T14:32:35.345840+00:00\",\\n        \"category\": \"feature request\"\\n    },\\n    {\\n        \"id\": 209,\\n        \"project_id\": \"76de9616-3d7b-49d7-b909-e154dda91489\",\\n        \"subject\": \"Urgent: Production Environment Down\",\\n        \"description\": \"Complete outage of production environment...\",\\n        \"created_at\": \"2024-12-05T07:00:00+00:00\",\\n        \"category\": \"downtime\"\\n    },\\n    {\\n        \"id\": 169,\\n        \"project_id\": \"386d8856-9020-47eb-a21a-2ebe6b81428e\",\\n        \"subject\": \"Schema Registry causing high resource usage\",\\n        \"description\": \"Resource exhaustion issues...\",\\n        \"created_at\": \"2024-11-12T05:00:00+00:00\",\\n        \"category\": \"performance\"\\n    },\\n    {\\n        \"id\": 251,\\n        \"project_id\": \"d5dc02fc-707a-4084-854a-79f5866d4dd3\",\\n        \"subject\": \"Performance degradation in permission-related operations\",\\n        \"description\": \"Performance degradation in permissions...\",\\n        \"created_at\": \"2024-10-25T04:00:00+00:00\",\\n        \"category\": \"performance\"\\n    }\\n]\\n\\n# Plan data\\nproject_plans = {\\n    \"2a8d4b07-c391-450f-8153-f6521f8a20a0\": \"base\",\\n    \"386d8856-9020-47eb-a21a-2ebe6b81428e\": \"advanced\",\\n    \"76de9616-3d7b-49d7-b909-e154dda91489\": \"free\",\\n    \"d5dc02fc-707a-4084-854a-79f5866d4dd3\": \"base\"\\n}\\n\\n# Category priority order\\ncategory_priority = {\\n    \"downtime\": 0,\\n    \"reliability\": 1,\\n    \"performance\": 2,\\n    \"bug\": 3,\\n    \"feature request\": 4,\\n    \"others\": 5\\n}\\n\\ndef compare_tickets(t1, t2):\\n    # Rule 1: Advanced plan with downtime/reliability\\n    t1_advanced_critical = (project_plans.get(t1[\"project_id\"]) == \"advanced\" and \\n                          t1[\"category\"] in [\"downtime\", \"reliability\"])\\n    t2_advanced_critical = (project_plans.get(t2[\"project_id\"]) == \"advanced\" and \\n                          t2[\"category\"] in [\"downtime\", \"reliability\"])\\n    if t1_advanced_critical != t2_advanced_critical:\\n        return -1 if t1_advanced_critical else 1\\n\\n    # Rule 2: Base plan with downtime/reliability\\n    t1_base_critical = (project_plans.get(t1[\"project_id\"]) == \"base\" and \\n                       t1[\"category\"] in [\"downtime\", \"reliability\"])\\n    t2_base_critical = (project_plans.get(t2[\"project_id\"]) == \"base\" and \\n                       t2[\"category\"] in [\"downtime\", \"reliability\"])\\n    if t1_base_critical != t2_base_critical:\\n        return -1 if t1_base_critical else 1\\n\\n    # Rule 3: Free plan with downtime\\n    t1_free_downtime = (project_plans.get(t1[\"project_id\"]) == \"free\" and \\n                       t1[\"category\"] == \"downtime\")\\n    t2_free_downtime = (project_plans.get(t2[\"project_id\"]) == \"free\" and \\n                       t2[\"category\"] == \"downtime\")\\n    if t1_free_downtime != t2_free_downtime:\\n        return -1 if t1_free_downtime else 1\\n\\n    # Rule 4: Category priority\\n    if t1[\"category\"] != t2[\"category\"]:\\n        return category_priority[t1[\"category\"]] - category_priority[t2[\"category\"]]\\n\\n    # Rule 5: Creation time (older first)\\n    t1_time = datetime.fromisoformat(t1[\"created_at\"].replace(\\'Z\\', \\'+00:00\\'))\\n    t2_time = datetime.fromisoformat(t2[\"created_at\"].replace(\\'Z\\', \\'+00:00\\'))\\n    return (t1_time - t2_time).total_seconds()\\n\\n# Sort tickets\\nsorted_tickets = sorted(tickets, key=cmp_to_key(compare_tickets))\\n\\nprint(\"<tickets>\")\\nfor ticket in sorted_tickets[:5]:\\n    print(ticket[\"id\"])\\nprint(\"</tickets>\")'}, name='execute_python_program', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_015hkSNSrKs83qGKSULVTiSC",
        "content": "{\"stdout\": \"<tickets>\\n143\\n209\\n251\\n169\\n166\\n</tickets>\\n\", \"stderr\": \"\", \"exitCode\": 0}"
      }
    ]
  },
  {
    "role": "assistant",
    "content": "Let me explain the prioritized order:\n\n1. Ticket 143: Downtime issue on Base plan (high priority due to base plan + downtime)\n2. Ticket 209: Downtime issue on Free plan (high priority due to free plan + downtime)\n3. Ticket 251: Performance issue on Base plan\n4. Ticket 169: Performance issue on Advanced plan\n5. Ticket 166: Feature request on Base plan\n\nThe sorting follows the rules exactly as specified:\n- Tickets with downtime on base plan (143) came first\n- Followed by downtime on free plan (209)\n- Then performance issues (251, 169) sorted by creation time\n- Finally, feature request (166)\n\nThe categorization was done based on the ticket content:\n- Tickets mentioning inability to access/complete outage were classified as \"downtime\"\n- Tickets mentioning slow responses/performance degradation were classified as \"performance\"\n- Tickets explicitly mentioning new feature requests were classified as \"feature request\""
  }
]