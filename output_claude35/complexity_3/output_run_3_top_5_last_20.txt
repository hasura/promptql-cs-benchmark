Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 20 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<tickets>
123
987
</tickets>

Response:
Here are the top 5 prioritized tickets with their explanations:

1. Ticket #209: This ticket is classified as "downtime" as it reports a complete production environment outage. Even though it's on a free plan, the downtime category gives it top priority. It was created on Dec 5, 2024.

2. Ticket #143: Also classified as "downtime" due to inability to access the project and service disruption. It's on a base plan and was created on Jan 3, 2025, but the downtime category keeps it high priority.

3. Ticket #251: This is classified as "performance" issue due to significant degradation in permission-related operations. It's on a base plan and was created on Oct 25, 2024.

4. Ticket #169: This is classified as "performance" issue due to resource exhaustion and slow responses. Even though it's on an advanced plan, since it's a performance issue rather than downtime/reliability, it ranks after the downtime tickets. Created on Nov 12, 2024.

5. Ticket #166: This is classified as a "feature request" for custom GraphQL directives. It's on a base plan and was created on Dec 21, 2024, but being a feature request puts it at a lower priority than the operational issues above.

The tickets are sorted based on:
1. Advanced plan tickets with downtime/reliability issues (none in this case)
2. Category priority (downtime > reliability > performance > bug > feature request > others)
3. Creation time (older tickets prioritized when categories match)