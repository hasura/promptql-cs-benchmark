[
  {
    "timestamp": "2025-01-29T16:23:24.013492",
    "response": {
      "id": "msg_014YsqivaHzygoT2LDSG9tmq",
      "content": [
        {
          "citations": null,
          "text": "I'll help you analyze and prioritize the support tickets. Let me break this down into steps:\n\n1. First, let's get the last 5 open tickets with their details\n2. Extract project IDs and get their plan information\n3. Classify the tickets\n4. Sort them according to the given rules\n\nHere's the implementation:",
          "type": "text"
        },
        {
          "id": "toolu_016RpTKWB7aGmdHKCdbSbpUe",
          "input": {
            "pythonCode": "import re\nfrom datetime import datetime\nfrom functools import cmp_to_key\n\ndef extract_project_id(description):\n    # UUID pattern\n    uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n    if description:\n        matches = re.findall(uuid_pattern, description.lower())\n        return matches[0] if matches else None\n    return None\n\ndef classify_ticket(subject, description):\n    if not subject or not description:\n        return \"others\"\n    \n    text = (subject + \" \" + description).lower()\n    \n    # Downtime indicators\n    if any(word in text for word in ['outage', 'down', '500 error', 'service disruption', 'unable to access']):\n        return \"downtime\"\n    \n    # Reliability indicators\n    if any(word in text for word in ['intermittent', 'unstable', 'random failure', 'connectivity issue']):\n        return \"reliability\"\n    \n    # Performance indicators\n    if any(word in text for word in ['slow', 'latency', 'performance', 'response time']):\n        return \"performance\"\n    \n    # Bug indicators\n    if any(word in text for word in ['bug', 'incorrect', 'wrong result', 'not working as expected']):\n        return \"bug\"\n    \n    # Feature request indicators\n    if any(word in text for word in ['feature request', 'new feature', 'enhance', 'add capability']):\n        return \"feature request\"\n    \n    return \"others\"\n\ndef compare_tickets(t1, t2):\n    # Rule 1: Advanced plan with downtime/reliability\n    t1_critical = t1['plan_name'] == 'Advanced' and t1['category'] in ['downtime', 'reliability']\n    t2_critical = t2['plan_name'] == 'Advanced' and t2['category'] in ['downtime', 'reliability']\n    \n    if t1_critical and not t2_critical:\n        return -1\n    if t2_critical and not t1_critical:\n        return 1\n    \n    # Rule 2: Category priority\n    category_priority = {\n        'downtime': 0,\n        'reliability': 1,\n        'performance': 2,\n        'bug': 3,\n        'feature request': 4,\n        'others': 5\n    }\n    \n    if category_priority[t1['category']] < category_priority[t2['category']]:\n        return -1\n    if category_priority[t1['category']] > category_priority[t2['category']]:\n        return 1\n    \n    # Rule 3: Creation time\n    if t1['created_at'] < t2['created_at']:\n        return -1\n    if t1['created_at'] > t2['created_at']:\n        return 1\n    \n    return 0\n\n# Main processing\nimport json\nimport sys\n\n# Get input data\ndata = json.loads(sys.argv[1])\ntickets = data['tickets']\nplans = data['plans']\n\n# Process tickets\nprocessed_tickets = []\nfor ticket in tickets:\n    project_id = extract_project_id(ticket['description'])\n    \n    # Find most recent plan\n    plan_name = 'Unknown'\n    if project_id:\n        project_plans = [p for p in plans if p['project_id'] == project_id]\n        if project_plans:\n            latest_plan = max(project_plans, key=lambda x: x['created_at'])\n            plan_name = latest_plan['plan_name']\n    \n    processed_ticket = {\n        'id': ticket['id'],\n        'project_id': project_id,\n        'plan_name': plan_name,\n        'category': classify_ticket(ticket['subject'], ticket['description']),\n        'created_at': ticket['created_at']\n    }\n    processed_tickets.append(processed_ticket)\n\n# Sort tickets\nsorted_tickets = sorted(processed_tickets, key=cmp_to_key(compare_tickets))\n\n# Print results\nprint(\"<tickets>\")\nfor ticket in sorted_tickets:\n    print(ticket['id'])\nprint(\"</tickets>\")",
            "dataValues": "{\n    \"tickets\": {{query_support_tickets(sql=\"SELECT id, subject, description, created_at FROM support_ticket WHERE status = 'open' ORDER BY created_at DESC LIMIT 5\")}},\n    \"plans\": {{query_control_plane_data(sql=\"SELECT pp.project_id, p.name as plan_name, pp.created_at FROM project_plan_changelogs pp JOIN plans p ON pp.plan_id = p.id\")}}\n}"
          },
          "name": "execute_python_program",
          "type": "tool_use"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 1627,
        "output_tokens": 1312
      }
    }
  },
  {
    "timestamp": "2025-01-29T16:23:37.862422",
    "response": {
      "id": "msg_01AwVw4hDaM41ytuLWoKN1ot",
      "content": [
        {
          "citations": null,
          "text": "I apologize for the error in my previous attempt. Let me fix the query and data processing:",
          "type": "text"
        },
        {
          "id": "toolu_016G2yqQeEecUeyERXCXqvGU",
          "input": {
            "pythonCode": "import re\nfrom datetime import datetime\nfrom functools import cmp_to_key\nimport json\n\n# First get the raw ticket and plan data\ntickets_raw = \"\"\"{{query_support_tickets(sql=\"SELECT id, subject, description, created_at FROM support_ticket WHERE status = 'open' ORDER BY created_at DESC LIMIT 5\")}}\"\"\"\nplans_raw = \"\"\"{{query_control_plane_data(sql=\"SELECT pp.project_id, p.name as plan_name, pp.created_at FROM project_plan_changelogs pp JOIN plans p ON pp.plan_id = p.id\")}}\"\"\"\n\ntickets = json.loads(tickets_raw)\nplans = json.loads(plans_raw)\n\ndef extract_project_id(description):\n    # UUID pattern\n    uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n    if description:\n        matches = re.findall(uuid_pattern, description.lower())\n        return matches[0] if matches else None\n    return None\n\ndef classify_ticket(subject, description):\n    if not subject or not description:\n        return \"others\"\n    \n    text = (subject + \" \" + description).lower()\n    \n    # Downtime indicators\n    if any(word in text for word in ['outage', 'down', '500 error', 'service disruption', 'unable to access']):\n        return \"downtime\"\n    \n    # Reliability indicators\n    if any(word in text for word in ['intermittent', 'unstable', 'random failure', 'connectivity issue']):\n        return \"reliability\"\n    \n    # Performance indicators\n    if any(word in text for word in ['slow', 'latency', 'performance', 'response time']):\n        return \"performance\"\n    \n    # Bug indicators\n    if any(word in text for word in ['bug', 'incorrect', 'wrong result', 'not working as expected']):\n        return \"bug\"\n    \n    # Feature request indicators\n    if any(word in text for word in ['feature request', 'new feature', 'enhance', 'add capability']):\n        return \"feature request\"\n    \n    return \"others\"\n\ndef compare_tickets(t1, t2):\n    # Rule 1: Advanced plan with downtime/reliability\n    t1_critical = t1['plan_name'] == 'Advanced' and t1['category'] in ['downtime', 'reliability']\n    t2_critical = t2['plan_name'] == 'Advanced' and t2['category'] in ['downtime', 'reliability']\n    \n    if t1_critical and not t2_critical:\n        return -1\n    if t2_critical and not t1_critical:\n        return 1\n    \n    # Rule 2: Category priority\n    category_priority = {\n        'downtime': 0,\n        'reliability': 1,\n        'performance': 2,\n        'bug': 3,\n        'feature request': 4,\n        'others': 5\n    }\n    \n    if category_priority[t1['category']] < category_priority[t2['category']]:\n        return -1\n    if category_priority[t1['category']] > category_priority[t2['category']]:\n        return 1\n    \n    # Rule 3: Creation time\n    if t1['created_at'] < t2['created_at']:\n        return -1\n    if t1['created_at'] > t2['created_at']:\n        return 1\n    \n    return 0\n\n# Process tickets\nprocessed_tickets = []\nfor ticket in tickets:\n    project_id = extract_project_id(ticket['description'])\n    \n    # Find most recent plan\n    plan_name = 'Unknown'\n    if project_id:\n        project_plans = [p for p in plans if p['project_id'] == project_id]\n        if project_plans:\n            latest_plan = max(project_plans, key=lambda x: x['created_at'])\n            plan_name = latest_plan['plan_name']\n    \n    processed_ticket = {\n        'id': ticket['id'],\n        'project_id': project_id,\n        'plan_name': plan_name,\n        'category': classify_ticket(ticket['subject'], ticket['description']),\n        'created_at': ticket['created_at']\n    }\n    processed_tickets.append(processed_ticket)\n\n# Sort tickets\nsorted_tickets = sorted(processed_tickets, key=cmp_to_key(compare_tickets))\n\n# Print results\nprint(\"<tickets>\")\nfor ticket in sorted_tickets:\n    print(ticket['id'])\nprint(\"</tickets>\")"
          },
          "name": "execute_python_program",
          "type": "tool_use"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 3284,
        "output_tokens": 1231
      }
    }
  },
  {
    "timestamp": "2025-01-29T16:23:40.517989",
    "response": {
      "id": "msg_019wXF4tPSmqkAMuwSBvxWEw",
      "content": [
        {
          "citations": null,
          "text": "I apologize for the continued errors. Let me modify the approach slightly:",
          "type": "text"
        },
        {
          "id": "toolu_01WmALaKCcpwUosXqdCKxSZb",
          "input": {
            "sql": "SELECT id, subject, description, created_at FROM support_ticket WHERE status = 'open' ORDER BY created_at DESC LIMIT 5"
          },
          "name": "query_support_tickets",
          "type": "tool_use"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 4864,
        "output_tokens": 102
      }
    }
  },
  {
    "timestamp": "2025-01-29T16:23:44.310255",
    "response": {
      "id": "msg_015HR7KbDqLjjiJtRHVMhGHN",
      "content": [
        {
          "id": "toolu_01X1Q1cFsR2XpcCguZnxjP4A",
          "input": {
            "sql": "SELECT pp.project_id, p.name as plan_name, pp.created_at \nFROM project_plan_changelogs pp \nJOIN plans p ON pp.plan_id = p.id\nWHERE pp.project_id IN (\n    '2a8d4b07-c391-450f-8153-f6521f8a20a0',\n    '76de9616-3d7b-49d7-b909-e154dda91489',\n    '386d8856-9020-47eb-a21a-2ebe6b81428e',\n    'd5dc02fc-707a-4084-854a-79f5866d4dd3'\n)"
          },
          "name": "query_control_plane_data",
          "type": "tool_use"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 5881,
        "output_tokens": 223
      }
    }
  },
  {
    "timestamp": "2025-01-29T16:23:58.985241",
    "response": {
      "id": "msg_01MevtXnixARQuMXpv43883s",
      "content": [
        {
          "citations": null,
          "text": "Now, let me process this data with the sorting logic:",
          "type": "text"
        },
        {
          "id": "toolu_015DJFFpcLuZzN3uNbQMfKND",
          "input": {
            "pythonCode": "from datetime import datetime\nfrom functools import cmp_to_key\nimport json\n\ntickets = [\n    {\n        'id': 143,\n        'subject': \"URGENT: Cannot Access Project\",\n        'description': \"I am unable to access my project on Hasura Cloud...\",\n        'created_at': \"2025-01-03T20:32:35.345840+00:00\",\n        'project_id': \"2a8d4b07-c391-450f-8153-f6521f8a20a0\",\n        'plan_name': \"base\",\n        'category': \"downtime\"\n    },\n    {\n        'id': 166,\n        'subject': \"Feature Request: Support for Custom GraphQL Directives\",\n        'description': \"Hello, We are using your platform with a PostgreSQL database...\",\n        'created_at': \"2024-12-21T14:32:35.345840+00:00\",\n        'project_id': \"2a8d4b07-c391-450f-8153-f6521f8a20a0\",\n        'plan_name': \"base\",\n        'category': \"feature request\"\n    },\n    {\n        'id': 209,\n        'subject': \"Urgent: Production Environment Down - Immediate Assistance Required\",\n        'description': \"Hello, We are experiencing a complete outage...\",\n        'created_at': \"2024-12-05T07:00:00+00:00\",\n        'project_id': \"76de9616-3d7b-49d7-b909-e154dda91489\",\n        'plan_name': \"free\",\n        'category': \"downtime\"\n    },\n    {\n        'id': 169,\n        'subject': \"Schema Registry causing high resource usage and slow responses in production\",\n        'description': \"Hi, We are experiencing resource exhaustion issues...\",\n        'created_at': \"2024-11-12T05:00:00+00:00\",\n        'project_id': \"386d8856-9020-47eb-a21a-2ebe6b81428e\",\n        'plan_name': \"advanced\",\n        'category': \"performance\"\n    },\n    {\n        'id': 251,\n        'subject': \"Performance degradation in permission-related operations\",\n        'description': \"Hi Support, We are experiencing significant performance degradation...\",\n        'created_at': \"2024-10-25T04:00:00+00:00\",\n        'project_id': \"d5dc02fc-707a-4084-854a-79f5866d4dd3\",\n        'plan_name': \"base\",\n        'category': \"performance\"\n    }\n]\n\ndef compare_tickets(t1, t2):\n    # Rule 1: Advanced plan with downtime/reliability\n    t1_critical = t1['plan_name'].lower() == 'advanced' and t1['category'] in ['downtime', 'reliability']\n    t2_critical = t2['plan_name'].lower() == 'advanced' and t2['category'] in ['downtime', 'reliability']\n    \n    if t1_critical and not t2_critical:\n        return -1\n    if t2_critical and not t1_critical:\n        return 1\n    \n    # Rule 2: Category priority\n    category_priority = {\n        'downtime': 0,\n        'reliability': 1,\n        'performance': 2,\n        'bug': 3,\n        'feature request': 4,\n        'others': 5\n    }\n    \n    if category_priority[t1['category']] < category_priority[t2['category']]:\n        return -1\n    if category_priority[t1['category']] > category_priority[t2['category']]:\n        return 1\n    \n    # Rule 3: Creation time\n    t1_time = datetime.fromisoformat(t1['created_at'])\n    t2_time = datetime.fromisoformat(t2['created_at'])\n    \n    if t1_time < t2_time:\n        return -1\n    if t1_time > t2_time:\n        return 1\n    \n    return 0\n\n# Sort tickets\nsorted_tickets = sorted(tickets, key=cmp_to_key(compare_tickets))\n\n# Print results\nprint(\"<tickets>\")\nfor ticket in sorted_tickets:\n    print(ticket['id'])\nprint(\"</tickets>\")"
          },
          "name": "execute_python_program",
          "type": "tool_use"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 6378,
        "output_tokens": 1153
      }
    }
  },
  {
    "timestamp": "2025-01-29T16:24:03.565683",
    "response": {
      "id": "msg_01P1W8TpwvoMgf2X1jid4imk",
      "content": [
        {
          "citations": null,
          "text": "Let me explain the prioritized order of the tickets:\n\n1. Ticket 209: Downtime issue (production environment down) - High priority due to downtime category\n2. Ticket 143: Downtime issue (cannot access project) - High priority due to downtime category\n3. Ticket 251: Performance issue (permission-related operations)\n4. Ticket 169: Performance issue (Schema Registry causing slow responses)\n5. Ticket 166: Feature request (custom GraphQL directives)\n\nThe sorting followed these rules:\n1. First, checked for Advanced plan tickets with downtime/reliability issues (none in this case)\n2. Then sorted by category priority (downtime > reliability > performance > bug > feature request > others)\n3. For tickets in the same category, sorted by creation time (older tickets first)\n\nThis prioritization ensures that critical system-wide issues are addressed first, followed by performance issues, and finally feature requests. The order also takes into account the timestamp of when these issues were reported.",
          "type": "text"
        }
      ],
      "model": "claude-3-5-sonnet-20241022",
      "role": "assistant",
      "stop_reason": "end_turn",
      "stop_sequence": null,
      "type": "message",
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "input_tokens": 7579,
        "output_tokens": 226
      }
    }
  }
]