[
  {
    "role": "user",
    "content": "Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 5 open tickets (i.e., status = 'open').\n\nFor each ticket do the following:\n- intelligently extract the project ID from the ticket description. project IDs are UUIDs\n- get the plan the project is most recently on\n- get the time the ticket was created at\n- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.\n\nClassification instructions:\n\n1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.\n\n2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. \n\n3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. \n\n4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  \n\n5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. \n\n6. Others: Any other type of ticket which does not fit the above categories\n\nNow sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).\n- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.\n- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others\n- Compare ticket creation times to prioritize the older ticket.\n\nReturn the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line\nExample:\n<tickets>\n123\n987\n</tickets>"
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text=\"I'll help you analyze and prioritize the support tickets. This will require several steps:\\n\\n1. First, get the last 5 open tickets\\n2. Extract project IDs and get their plan information\\n3. Classify tickets\\n4. Sort them according to the priority rules\\n\\nLet's start:\", type='text')",
      "ToolUseBlock(id='toolu_019EDMkAHykwnA2fHcfNWR3X', input={'sql': \"SELECT t.id, t.description, t.created_at, t.subject\\nFROM support_ticket t\\nWHERE t.status = 'open'\\nORDER BY t.created_at DESC\\nLIMIT 5;\"}, name='query_support_tickets', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_019EDMkAHykwnA2fHcfNWR3X",
        "content": "[{\"id\": 143, \"description\": \"I am unable to access my project on Hasura Cloud. When I try to open the project dashboard, it fails to load and shows an error message. This is critically impacting our production environment and needs immediate attention.\\n\\nProject ID: abc123\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.41.0\\n\\nPlease assist as soon as possible.\\n\\nThank you.\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\", \"created_at\": \"2025-01-03T20:32:35.345840+00:00\", \"subject\": \"URGENT: Cannot Access Project\"}, {\"id\": 166, \"description\": \"Hello,\\n\\nWe are using your platform with a PostgreSQL database and would like to request support for custom GraphQL directives in queries and mutations. This feature would greatly help us implement advanced query logic and improve our application's flexibility.\\n\\nIs this something that could be supported in future releases?\\n\\nThank you for your assistance.\\n\\n\\nProject ID: 2a8d4b07-c391-450f-8153-f6521f8a20a0\\n\", \"created_at\": \"2024-12-21T14:32:35.345840+00:00\", \"subject\": \"Feature Request: Support for Custom GraphQL Directives\"}, {\"id\": 209, \"description\": \"Hello,\\n\\nWe are experiencing a complete outage of our production environment. All our services are down, and users are unable to access the application, leading to a major disruption in our operations.\\n\\nOur application uses PostgreSQL as the database, and we are currently running version v2.48.5. We have not made any recent changes or deployments that could have caused this issue.\\n\\nWe urgently need assistance to resolve this problem.\\n\\nThank you,\\n[Your Name]\\n\\nProject ID: 76de9616-3d7b-49d7-b909-e154dda91489\\n\", \"created_at\": \"2024-12-05T07:00:00+00:00\", \"subject\": \"Urgent: Production Environment Down - Immediate Assistance Required\"}, {\"id\": 169, \"description\": \"Hi,\\n\\nWe are experiencing resource exhaustion issues while using the Schema Registry feature in our production environment. The Schema Registry seems to consume a lot of CPU and memory resources, leading to slow responses from our application.\\n\\nWe are using PostgreSQL as our database.\\n\\nVersion: v2.46.0\\n\\nCould you please help us resolve this issue?\\n\\nThanks.\\n\\nProject ID: 386d8856-9020-47eb-a21a-2ebe6b81428e\\n\", \"created_at\": \"2024-11-12T05:00:00+00:00\", \"subject\": \"Schema Registry causing high resource usage and slow responses in production\"}, {\"id\": 251, \"description\": \"Hi Support,\\n\\nWe are experiencing significant performance degradation when performing operations that involve permissions in our Hasura setup. Queries that used to execute in milliseconds are now taking several seconds to complete, especially those with complex permission rules.\\n\\nWe are using PostgreSQL as our database. Current Hasura version: v2.44.0.\\n\\nCould you please help us troubleshoot this issue and suggest any optimizations?\\n\\nThanks.\\n\\nProject ID: d5dc02fc-707a-4084-854a-79f5866d4dd3\\n\", \"created_at\": \"2024-10-25T04:00:00+00:00\", \"subject\": \"Performance degradation in permission-related operations\"}]"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text=\"Now, let's get the plan information for these projects:\", type='text')",
      "ToolUseBlock(id='toolu_014xFr4jUK34QW9rqJee1fxu', input={'sql': \"WITH latest_plans AS (\\n    SELECT DISTINCT ON (ppc.project_id) \\n        ppc.project_id,\\n        p.name as plan_name\\n    FROM project_plan_changelogs ppc\\n    JOIN plans p ON p.id = ppc.plan_id\\n    WHERE ppc.project_id IN (\\n        '2a8d4b07-c391-450f-8153-f6521f8a20a0',\\n        '76de9616-3d7b-49d7-b909-e154dda91489',\\n        '386d8856-9020-47eb-a21a-2ebe6b81428e',\\n        'd5dc02fc-707a-4084-854a-79f5866d4dd3'\\n    )\\n    ORDER BY ppc.project_id, ppc.created_at DESC\\n)\\nSELECT * FROM latest_plans;\"}, name='query_control_plane_data', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_014xFr4jUK34QW9rqJee1fxu",
        "content": "[{\"project_id\": \"2a8d4b07-c391-450f-8153-f6521f8a20a0\", \"plan_name\": \"base\"}, {\"project_id\": \"386d8856-9020-47eb-a21a-2ebe6b81428e\", \"plan_name\": \"advanced\"}, {\"project_id\": \"76de9616-3d7b-49d7-b909-e154dda91489\", \"plan_name\": \"free\"}, {\"project_id\": \"d5dc02fc-707a-4084-854a-79f5866d4dd3\", \"plan_name\": \"base\"}]"
      }
    ]
  },
  {
    "role": "assistant",
    "content": [
      "TextBlock(citations=None, text='Now, let me write a Python program to classify and sort the tickets based on the given rules:', type='text')",
      "ToolUseBlock(id='toolu_01Jw5sCuQJMvtu9yhnB6os3Q', input={'pythonCode': 'from functools import cmp_to_key\\nimport json\\n\\ntickets = [\\n    {\\n        \\'id\\': 143,\\n        \\'project_id\\': \\'2a8d4b07-c391-450f-8153-f6521f8a20a0\\',\\n        \\'description\\': \\'Cannot Access Project\\',\\n        \\'created_at\\': \\'2025-01-03T20:32:35.345840+00:00\\',\\n        \\'category\\': \\'downtime\\',  # Project dashboard not loading, critical production impact\\n        \\'plan\\': \\'base\\'\\n    },\\n    {\\n        \\'id\\': 166,\\n        \\'project_id\\': \\'2a8d4b07-c391-450f-8153-f6521f8a20a0\\',\\n        \\'description\\': \\'Support for Custom GraphQL Directives\\',\\n        \\'created_at\\': \\'2024-12-21T14:32:35.345840+00:00\\',\\n        \\'category\\': \\'feature request\\',  # Clearly requesting a new feature\\n        \\'plan\\': \\'base\\'\\n    },\\n    {\\n        \\'id\\': 209,\\n        \\'project_id\\': \\'76de9616-3d7b-49d7-b909-e154dda91489\\',\\n        \\'description\\': \\'Production Environment Down\\',\\n        \\'created_at\\': \\'2024-12-05T07:00:00+00:00\\',\\n        \\'category\\': \\'downtime\\',  # Complete production outage\\n        \\'plan\\': \\'free\\'\\n    },\\n    {\\n        \\'id\\': 169,\\n        \\'project_id\\': \\'386d8856-9020-47eb-a21a-2ebe6b81428e\\',\\n        \\'description\\': \\'Schema Registry Performance Issues\\',\\n        \\'created_at\\': \\'2024-11-12T05:00:00+00:00\\',\\n        \\'category\\': \\'performance\\',  # Resource exhaustion and slow responses\\n        \\'plan\\': \\'advanced\\'\\n    },\\n    {\\n        \\'id\\': 251,\\n        \\'project_id\\': \\'d5dc02fc-707a-4084-854a-79f5866d4dd3\\',\\n        \\'description\\': \\'Performance Issues\\',\\n        \\'created_at\\': \\'2024-10-25T04:00:00+00:00\\',\\n        \\'category\\': \\'performance\\',  # Clear performance degradation\\n        \\'plan\\': \\'base\\'\\n    }\\n]\\n\\ndef get_category_priority(category):\\n    priority_map = {\\n        \\'downtime\\': 6,\\n        \\'reliability\\': 5,\\n        \\'performance\\': 4,\\n        \\'bug\\': 3,\\n        \\'feature request\\': 2,\\n        \\'others\\': 1\\n    }\\n    return priority_map.get(category, 0)\\n\\ndef compare_tickets(a, b):\\n    # Rule 1: Advanced plan with downtime/reliability\\n    a_critical = a[\\'plan\\'] == \\'advanced\\' and a[\\'category\\'] in [\\'downtime\\', \\'reliability\\']\\n    b_critical = b[\\'plan\\'] == \\'advanced\\' and b[\\'category\\'] in [\\'downtime\\', \\'reliability\\']\\n    if a_critical != b_critical:\\n        return 1 if a_critical else -1\\n    \\n    # Rule 2: Category priority\\n    a_priority = get_category_priority(a[\\'category\\'])\\n    b_priority = get_category_priority(b[\\'category\\'])\\n    if a_priority != b_priority:\\n        return b_priority - a_priority\\n    \\n    # Rule 3: Creation time (older first)\\n    return -1 if a[\\'created_at\\'] < b[\\'created_at\\'] else 1\\n\\n# Sort tickets\\nsorted_tickets = sorted(tickets, key=cmp_to_key(compare_tickets))\\n\\n# Print results in the required format\\nprint(\"<tickets>\")\\nfor ticket in sorted_tickets:\\n    print(ticket[\\'id\\'])\\nprint(\"</tickets>\")'}, name='execute_python_program', type='tool_use')"
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "type": "tool_result",
        "tool_use_id": "toolu_01Jw5sCuQJMvtu9yhnB6os3Q",
        "content": "{\"stdout\": \"<tickets>\\n209\\n143\\n251\\n169\\n166\\n</tickets>\\n\", \"stderr\": \"\", \"exitCode\": 0}"
      }
    ]
  },
  {
    "role": "assistant",
    "content": "Let me explain the prioritized order:\n\n1. Ticket 209: Downtime issue (highest category priority), though on free plan\n2. Ticket 143: Downtime issue, on base plan\n3. Ticket 251: Performance issue, on base plan\n4. Ticket 169: Performance issue, on advanced plan (would have been higher priority if it was downtime/reliability)\n5. Ticket 166: Feature request (lowest category priority among these tickets)\n\nThe tickets are sorted according to the rules specified:\n1. First rule about advanced plan with downtime/reliability didn't affect the order much since only one ticket was on advanced plan and it wasn't a downtime/reliability issue\n2. Category priority played the major role (downtime > performance > feature request)\n3. Creation time was used as a tiebreaker for tickets in the same category"
  }
]