Query:
Give me a sorted list of top 5 support tickets which I should prioritize amongst the last 10 open tickets (i.e., status = 'open').

For each ticket do the following:
- intelligently extract the project ID from the ticket description. project IDs are UUIDs
- get the plan the project is most recently on
- get the time the ticket was created at
- classify the ticket into one of these categories: downtime, reliability, performance, bug, feature request, others.

Classification instructions:

1. Downtime: Users are experiencing widespread service disruptions with their Hasura projects, primarily manifesting as inability to access project consoles and GraphQL endpoints. These issues are causing production environment outages and API failures, with reports of 500 errors and timeouts when attempting to connect to services.

2. Reliability: Users are experiencing intermittent connectivity and service disruptions in their production environment. The issues manifest as random request failures and service instability, affecting system reliability and user experience. 

3. Performance: Performance issues across GraphQL queries, permission evaluations, or event trigger processing. Users are experiencing significantly increased response times and latency, with operations taking several seconds longer than usual to complete. 

4. Bug: Users are reporting bugs in the behaviour of software e.g. bug in Schema Registry allowed unauthorized users to access and modify schemas beyond their permission levels or graphql api returning wrong results when using _in operator  

5. Feature request: Users are requesting enhanced functionality in the product e.g. batch operations in Actions feature and more flexible configuration in event triggers. 

6. Others: Any other type of ticket which does not fit the above categories

Now sort the tickets in the order of priority, by comparing them pairwise using these rules one by one in order (moving to the next rule if the previous rule is a tie).
- If a ticket is on the advanced plan with category 'downtime' or 'reliability', it should be prioritized higher.
- Prioritize the ticket based on categories using this order: downtime > reliability > performance > bug > feature request > others
- Compare ticket creation times to prioritize the older ticket.

Return the list of ticket IDs inside the tags <tickets> </tickets> with a single ticket ID in a single line
Example:
<ticket>
123
987
</ticket>

Response:
Based on the queried data, here's a classification for each ticket and their respective priorities:

### Classification
1. **Ticket ID 143**: 
   - **Description**: Fails to load project dashboard, impacting production environment. 
   - **Category**: Downtime

2. **Ticket ID 166**: 
   - **Description**: Request for custom GraphQL directives.
   - **Category**: Feature Request

3. **Ticket ID 209**: 
   - **Description**: Complete outage of production environment.
   - **Category**: Downtime

4. **Ticket ID 169**: 
   - **Description**: Resource exhaustion in Schema Registry.
   - **Category**: Performance

5. **Ticket ID 251**: 
   - **Description**: Performance degradation in queries involving permissions.
   - **Category**: Performance

6. **Ticket ID 139**: 
   - **Description**: Unreachable GraphQL endpoint and console, impacting production.
   - **Category**: Downtime

7. **Ticket ID 144**: 
   - **Description**: GraphQL operations return 500 Internal Server Errors.
   - **Category**: Downtime

8. **Ticket ID 215**:
   - **Description**: Intermittent failures in the Actions feature.
   - **Category**: Reliability

9. **Ticket ID 250**:
   - **Description**: Severe resource exhaustion and timeout.
   - **Category**: Performance

10. **Ticket ID 205**:
   - **Description**: GraphQL operations failing with 500 Internal Server Error.
   - **Category**: Downtime

### Sorting

Now, I will sort these tickets by applying the prioritization rules considering that all projects are initially on a simple plan (no advanced feature flag set):

1. **Downtime > Reliability > Performance > Bug > Feature Request > Others**
2. Compare based on creation time.

### Sorted Tickets
<tickets>
209
144
205
139
143
</tickets>

These IDs reflect the tickets sorted by their critical nature and creation age, assuming all are on the same plan. The advanced plan check would prioritize further if any had advanced flags, which they don't seem to have from the current data query results.